{"version":3,"sources":["../src/HttpTransport.js"],"names":["Transport","TransportError","axios","log","HttpTransport","open","url","timeout","check","constructor","exchange","apdu","apduHex","toString","response","method","headers","Accept","data","JSON","stringify","status","body","error","Buffer","from","setScrambleKey","close","Promise","resolve","isSupported","fetch","list","listen","_observer","unsubscribe"],"mappings":"AACA,OAAOA,SAAP,MAAsB,wBAAtB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,gBAApB;AAEA;;;;AAGA,eAAe,MAAMC,aAAN,SAA4BJ,SAA5B,CAA8C;AAI3D;AAmBA,eAAaK,IAAb,CAAkBC,GAAlB,EAA+BC,OAA/B,EAAiD;AAC/C,UAAMH,aAAa,CAACI,KAAd,CAAoBF,GAApB,EAAyBC,OAAzB,CAAN;AACA,WAAO,IAAIH,aAAJ,CAAkBE,GAAlB,CAAP;AACD;;AAIDG,EAAAA,WAAW,CAACH,GAAD,EAAc;AACvB;AADuB,SAFzBA,GAEyB;AAEvB,SAAKA,GAAL,GAAWA,GAAX;AACD;;AAED,QAAMI,QAAN,CAAeC,IAAf,EAA8C;AAC5C,UAAMC,OAAO,GAAGD,IAAI,CAACE,QAAL,CAAc,KAAd,CAAhB;AACAV,IAAAA,GAAG,CAAC,MAAD,EAAS,QAAQS,OAAjB,CAAH;AACA,UAAME,QAAQ,GAAG,MAAMZ,KAAK,CAAC;AAC3Ba,MAAAA,MAAM,EAAE,MADmB;AAE3BT,MAAAA,GAAG,EAAE,KAAKA,GAFiB;AAG3BU,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE,kBADD;AAEP,wBAAgB;AAFT,OAHkB;AAO3BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAER,QAAAA;AAAF,OAAf;AAPqB,KAAD,CAA5B;;AASA,QAAIE,QAAQ,CAACO,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAM,IAAIpB,cAAJ,CACJ,2CAA2Ca,QAAQ,CAACO,MADhD,EAEJ,wBAAwBP,QAAQ,CAACO,MAF7B,CAAN;AAID;;AACD,UAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACI,IAA5B;AACA,QAAII,IAAI,CAACC,KAAT,EAAgB,MAAMD,IAAI,CAACC,KAAX;AAChBpB,IAAAA,GAAG,CAAC,MAAD,EAAS,QAAQmB,IAAI,CAACJ,IAAtB,CAAH;AACA,WAAOM,MAAM,CAACC,IAAP,CAAYH,IAAI,CAACJ,IAAjB,EAAuB,KAAvB,CAAP;AACD;;AAEDQ,EAAAA,cAAc,GAAG,CAAE;;AAEnBC,EAAAA,KAAK,GAAkB;AACrB,WAAOC,OAAO,CAACC,OAAR,EAAP;AACD;;AA/D0D;;AAAxCzB,a,CACZ0B,W,GAAc,MACnBF,OAAO,CAACC,OAAR,CAAgB,OAAOE,KAAP,KAAiB,UAAjC,C;;AAFiB3B,a,CAKZ4B,I,GAAO,MAASJ,OAAO,CAACC,OAAR,CAAgB,EAAhB,C;;AALJzB,a,CAMZ6B,M,GAAUC,SAAD,KAAmB;AACjCC,EAAAA,WAAW,EAAE,MAAM,CAAE;AADY,CAAnB,C;;AANG/B,a,CAUZI,K,GAAQ,OAAOF,GAAP,EAAoBC,OAAe,GAAG,IAAtC,KAA+C;AAC5D,QAAMO,QAAQ,GAAG,MAAMZ,KAAK,CAAC;AAAEI,IAAAA,GAAF;AAAOC,IAAAA;AAAP,GAAD,CAA5B;;AACA,MAAIO,QAAQ,CAACO,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,UAAM,IAAIpB,cAAJ,CACJ,oCACEK,GADF,GAEE,YAFF,GAGEQ,QAAQ,CAACO,MAJP,EAKJ,4BALI,CAAN;AAOD;AACF,C","sourcesContent":["//@flow\nimport Transport from \"@ledgerhq/hw-transport\";\nimport { TransportError } from \"@ledgerhq/errors\";\nimport axios from \"axios\";\nimport { log } from \"@ledgerhq/logs\";\n\n/**\n * HTTP transport implementation\n */\nexport default class HttpTransport extends Transport<string> {\n  static isSupported = (): Promise<boolean> =>\n    Promise.resolve(typeof fetch === \"function\");\n\n  // this transport is not discoverable\n  static list = (): * => Promise.resolve([]);\n  static listen = (_observer: *) => ({\n    unsubscribe: () => {},\n  });\n\n  static check = async (url: string, timeout: number = 5000) => {\n    const response = await axios({ url, timeout });\n    if (response.status !== 200) {\n      throw new TransportError(\n        \"failed to access HttpTransport(\" +\n          url +\n          \"): status \" +\n          response.status,\n        \"HttpTransportNotAccessible\"\n      );\n    }\n  };\n\n  static async open(url: string, timeout?: number) {\n    await HttpTransport.check(url, timeout);\n    return new HttpTransport(url);\n  }\n\n  url: string;\n\n  constructor(url: string) {\n    super();\n    this.url = url;\n  }\n\n  async exchange(apdu: Buffer): Promise<Buffer> {\n    const apduHex = apdu.toString(\"hex\");\n    log(\"apdu\", \"=> \" + apduHex);\n    const response = await axios({\n      method: \"POST\",\n      url: this.url,\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      data: JSON.stringify({ apduHex }),\n    });\n    if (response.status !== 200) {\n      throw new TransportError(\n        \"failed to communicate to server. code=\" + response.status,\n        \"HttpTransportStatus\" + response.status\n      );\n    }\n    const body = await response.data;\n    if (body.error) throw body.error;\n    log(\"apdu\", \"<= \" + body.data);\n    return Buffer.from(body.data, \"hex\");\n  }\n\n  setScrambleKey() {}\n\n  close(): Promise<void> {\n    return Promise.resolve();\n  }\n}\n"],"file":"HttpTransport.js"}