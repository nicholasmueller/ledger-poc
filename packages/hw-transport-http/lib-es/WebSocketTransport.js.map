{"version":3,"sources":["../src/WebSocketTransport.js"],"names":["Transport","TransportError","log","WebSocket","global","require","WebSocketTransport","open","url","exchangeMethods","Promise","resolve","reject","socket","resolveExchange","_b","rejectExchange","_e","onDisconnect","close","send","msg","onopen","onerror","e","onclose","onmessage","data","JSON","parse","type","Error","error","Buffer","from","constructor","hook","emit","exchange","apdu","hex","toString","res","b","setScrambleKey","success","setTimeout","isSupported","list","listen","_observer","unsubscribe","check","timeout"],"mappings":"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","sourcesContent":["//@flow\nimport Transport from \"@ledgerhq/hw-transport\";\nimport { TransportError } from \"@ledgerhq/errors\";\nimport { log } from \"@ledgerhq/logs\";\n\nconst WebSocket = global.WebSocket || require(\"ws\");\n\n/**\n * WebSocket transport implementation\n */\nexport default class WebSocketTransport extends Transport<string> {\n  static isSupported = (): Promise<boolean> =>\n    Promise.resolve(typeof WebSocket === \"function\");\n\n  // this transport is not discoverable\n  static list = (): * => Promise.resolve([]);\n  static listen = (_observer: *) => ({\n    unsubscribe: () => {},\n  });\n\n  static check = async (url: string, timeout: number = 5000) =>\n    new Promise((resolve, reject) => {\n      const socket = new WebSocket(url);\n      let success = false;\n      setTimeout(() => {\n        socket.close();\n      }, timeout);\n      socket.onopen = () => {\n        success = true;\n        socket.close();\n      };\n      socket.onclose = () => {\n        if (success) resolve();\n        else {\n          reject(\n            new TransportError(\n              \"failed to access WebSocketTransport(\" + url + \")\",\n              \"WebSocketTransportNotAccessible\"\n            )\n          );\n        }\n      };\n      socket.onerror = () => {\n        reject(\n          new TransportError(\n            \"failed to access WebSocketTransport(\" + url + \"): error\",\n            \"WebSocketTransportNotAccessible\"\n          )\n        );\n      };\n    });\n\n  static async open(url: string) {\n    const exchangeMethods = await new Promise((resolve, reject) => {\n      try {\n        const socket = new WebSocket(url);\n        const exchangeMethods = {\n          resolveExchange: (_b: Buffer) => {},\n          rejectExchange: (_e: *) => {},\n          onDisconnect: () => {},\n          close: () => socket.close(),\n          send: (msg) => socket.send(msg),\n        };\n        socket.onopen = () => {\n          socket.send(\"open\");\n        };\n        socket.onerror = (e) => {\n          exchangeMethods.onDisconnect();\n          reject(e);\n        };\n        socket.onclose = () => {\n          exchangeMethods.onDisconnect();\n          reject(new TransportError(\"OpenFailed\", \"OpenFailed\"));\n        };\n        socket.onmessage = (e) => {\n          if (typeof e.data !== \"string\") return;\n          const data = JSON.parse(e.data);\n          switch (data.type) {\n            case \"opened\":\n              return resolve(exchangeMethods);\n            case \"error\":\n              reject(new Error(data.error));\n              return exchangeMethods.rejectExchange(\n                new TransportError(data.error, \"WSError\")\n              );\n            case \"response\":\n              return exchangeMethods.resolveExchange(\n                Buffer.from(data.data, \"hex\")\n              );\n          }\n        };\n      } catch (e) {\n        reject(e);\n      }\n    });\n    return new WebSocketTransport(exchangeMethods);\n  }\n\n  hook: *;\n\n  constructor(hook: *) {\n    super();\n    this.hook = hook;\n    hook.onDisconnect = () => {\n      this.emit(\"disconnect\");\n      this.hook.rejectExchange(\n        new TransportError(\"WebSocket disconnected\", \"WSDisconnect\")\n      );\n    };\n  }\n\n  async exchange(apdu: Buffer): Promise<Buffer> {\n    const hex = apdu.toString(\"hex\");\n    log(\"apdu\", \"=> \" + hex);\n    const res = await new Promise((resolve, reject) => {\n      this.hook.rejectExchange = (e: *) => reject(e);\n      this.hook.resolveExchange = (b: Buffer) => resolve(b);\n      this.hook.send(hex);\n    });\n    log(\"apdu\", \"<= \" + res.toString(\"hex\"));\n    return res;\n  }\n\n  setScrambleKey() {}\n\n  async close() {\n    this.hook.close();\n    return new Promise((success) => {\n      setTimeout(success, 200);\n    });\n  }\n}\n"],"file":"WebSocketTransport.js"}