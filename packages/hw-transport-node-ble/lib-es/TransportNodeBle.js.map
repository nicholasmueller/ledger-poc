{"version":3,"sources":["../src/TransportNodeBle.js"],"names":["Transport","sendAPDU","receiveAPDU","log","Observable","defer","merge","from","share","ignoreElements","first","map","tap","CantOpenDevice","DisconnectedDeviceDuringOperation","monitorCharacteristic","availability","retrieveServiceAndCharacteristics","write","disconnectDevice","listen","listenDeviceDisconnect","connectDevice","isDeviceDisconnected","transportsCache","reconnectionConfig","pairingThreshold","delayAfterFirstPairing","setReconnectionConfig","config","delay","ms","Promise","success","setTimeout","open","deviceOrId","needsReconnect","device","pipe","enabled","toPromise","notifyC","writeC","deviceModel","observable","monitoringReady","notifyObservable","value","toString","notif","subscribe","transport","BluetoothTransport","onDisconnect","e","notYetDisconnected","unsubscribe","disconnectedSub","id","emit","beforeMTUTime","Date","now","inferMTU","afterMTUTime","catch","observer","constructor","writeCharacteristic","mtuSize","exchange","apdu","exchangeAtomicImpl","msgIn","data","msgOut","String","buffer","message","mtu","readUInt8","Buffer","setScrambleKey","close","exchangeBusyPromise","isSupported","resolve","list","Error","disconnect"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-disable prefer-template */\n\nimport Transport from \"@ledgerhq/hw-transport\";\nimport type { DeviceModel } from \"@ledgerhq/devices\";\nimport { sendAPDU } from \"@ledgerhq/devices/lib/ble/sendAPDU\";\nimport { receiveAPDU } from \"@ledgerhq/devices/lib/ble/receiveAPDU\";\nimport { log } from \"@ledgerhq/logs\";\nimport { Observable, defer, merge, from } from \"rxjs\";\nimport { share, ignoreElements, first, map, tap } from \"rxjs/operators\";\nimport {\n  CantOpenDevice,\n  DisconnectedDeviceDuringOperation,\n} from \"@ledgerhq/errors\";\nimport {\n  monitorCharacteristic,\n  availability,\n  retrieveServiceAndCharacteristics,\n  write,\n  disconnectDevice,\n  listen,\n  listenDeviceDisconnect,\n  connectDevice,\n  isDeviceDisconnected,\n} from \"./platform\";\n\ntype Device = *;\n\nconst transportsCache = {};\n\ntype ReconnectionConfig = {\n  pairingThreshold: number,\n  delayAfterFirstPairing: number,\n};\nlet reconnectionConfig: ?ReconnectionConfig = {\n  pairingThreshold: 1000,\n  delayAfterFirstPairing: 4000,\n};\nexport function setReconnectionConfig(config: ?ReconnectionConfig) {\n  reconnectionConfig = config;\n}\n\nconst delay = (ms) => new Promise((success) => setTimeout(success, ms));\n\nasync function open(deviceOrId: Device | string, needsReconnect: boolean) {\n  let device;\n  if (typeof deviceOrId === \"string\") {\n    if (transportsCache[deviceOrId]) {\n      log(\"ble-verbose\", \"Transport in cache, using that.\");\n      return transportsCache[deviceOrId];\n    }\n  } else {\n    device = deviceOrId;\n  }\n\n  if (!device) {\n    throw new CantOpenDevice();\n  }\n\n  await availability.pipe(first((enabled) => enabled)).toPromise();\n\n  if (isDeviceDisconnected(device)) {\n    log(\"ble-verbose\", \"not connected. connecting...\");\n    await connectDevice(device);\n  }\n\n  const {\n    notifyC,\n    writeC,\n    deviceModel,\n  } = await retrieveServiceAndCharacteristics(device);\n\n  const [observable, monitoringReady] = monitorCharacteristic(notifyC);\n\n  const notifyObservable = observable.pipe(\n    tap((value) => {\n      log(\"ble-frame\", \"<= \" + value.toString(\"hex\"));\n    }),\n    share()\n  );\n\n  const notif = notifyObservable.subscribe();\n\n  const transport = new BluetoothTransport(\n    device,\n    writeC,\n    notifyObservable,\n    deviceModel\n  );\n\n  const onDisconnect = (e) => {\n    transport.notYetDisconnected = false;\n    notif.unsubscribe();\n    disconnectedSub();\n    delete transportsCache[transport.id];\n    log(\"ble-verbose\", `BleTransport(${transport.id}) disconnected`);\n    transport.emit(\"disconnect\", e);\n  };\n\n  // eslint-disable-next-line require-atomic-updates\n  transportsCache[transport.id] = transport;\n  const disconnectedSub = listenDeviceDisconnect(device, (e) => {\n    if (!transport.notYetDisconnected) return;\n    onDisconnect(e);\n  });\n\n  let beforeMTUTime = Date.now();\n  try {\n    await monitoringReady;\n    await transport.inferMTU();\n  } finally {\n    let afterMTUTime = Date.now();\n\n    if (reconnectionConfig) {\n      // workaround for #279: we need to open() again if we come the first time here,\n      // to make sure we do a disconnect() after the first pairing time\n      // because of a firmware bug\n\n      if (afterMTUTime - beforeMTUTime < reconnectionConfig.pairingThreshold) {\n        needsReconnect = false; // (optim) there is likely no new pairing done because mtu answer was fast.\n      }\n\n      if (needsReconnect) {\n        // necessary time for the bonding workaround\n        await disconnectDevice(device).catch(() => {});\n        await delay(reconnectionConfig.delayAfterFirstPairing);\n      }\n    } else {\n      needsReconnect = false;\n    }\n  }\n\n  if (needsReconnect) {\n    return open(device, false);\n  }\n\n  return transport;\n}\n\n/**\n * TransportNodeBle bluetooth BLE implementation\n * @example\n * import BluetoothTransport from \"@ledgerhq/hw-transport-node-ble\";\n */\nexport default class BluetoothTransport extends Transport<Device | string> {\n  /**\n   *\n   */\n  static isSupported = (): Promise<boolean> => Promise.resolve(true);\n\n  /**\n   *\n   */\n  static availability = availability;\n\n  static list = (): * => {\n    throw new Error(\"not implemented\");\n  };\n\n  /**\n   * Scan for bluetooth Ledger devices\n   */\n  static listen(observer: *) {\n    log(\"ble-verbose\", \"listen...\");\n    return listen().subscribe(observer);\n  }\n\n  /**\n   * Open a BLE transport\n   * @param {*} deviceOrId\n   */\n  static async open(deviceOrId: Device | string) {\n    return open(deviceOrId, true);\n  }\n\n  /**\n   * Globally disconnect a BLE device by its ID\n   */\n  static disconnect = async (id: *) => {\n    log(\"ble-verbose\", `user disconnect(${id})`);\n    if (id in transportsCache) {\n      disconnectDevice(transportsCache[id].device);\n    }\n  };\n\n  id: string;\n\n  device: Device;\n\n  mtuSize: number = 20;\n\n  writeCharacteristic: *;\n\n  notifyObservable: Observable<Buffer>;\n\n  deviceModel: DeviceModel;\n\n  notYetDisconnected = true;\n\n  constructor(\n    device: Device,\n    writeCharacteristic: *,\n    notifyObservable: Observable<Buffer>,\n    deviceModel: DeviceModel\n  ) {\n    super();\n    this.id = device.id;\n    this.device = device;\n    this.writeCharacteristic = writeCharacteristic;\n    this.notifyObservable = notifyObservable;\n    this.deviceModel = deviceModel;\n    log(\"ble-verbose\", `BleTransport(${String(this.id)}) new instance`);\n  }\n\n  /**\n   * communicate with a BLE transport\n   */\n  exchange = (apdu: Buffer): Promise<Buffer> =>\n    this.exchangeAtomicImpl(async () => {\n      try {\n        const msgIn = apdu.toString(\"hex\");\n        log(\"apdu\", `=> ${msgIn}`);\n\n        const data = await merge(\n          this.notifyObservable.pipe(receiveAPDU),\n          sendAPDU(this.write, apdu, this.mtuSize)\n        ).toPromise();\n\n        const msgOut = data.toString(\"hex\");\n        log(\"apdu\", `<= ${msgOut}`);\n\n        return data;\n      } catch (e) {\n        log(\"ble-error\", \"exchange got \" + String(e));\n        if (this.notYetDisconnected) {\n          // in such case we will always disconnect because something is bad.\n          await disconnectDevice(this.device).catch(() => {}); // but we ignore if disconnect worked.\n        }\n        throw e;\n      }\n    });\n\n  // TODO we probably will do this at end of open\n  async inferMTU() {\n    let { mtu } = this.device;\n    await this.exchangeAtomicImpl(async () => {\n      try {\n        mtu =\n          (await merge(\n            this.notifyObservable.pipe(\n              first((buffer) => buffer.readUInt8(0) === 0x08),\n              map((buffer) => buffer.readUInt8(5))\n            ),\n            defer(() => from(this.write(Buffer.from([0x08, 0, 0, 0, 0])))).pipe(\n              ignoreElements()\n            )\n          ).toPromise()) + 3;\n      } catch (e) {\n        log(\"ble-error\", \"inferMTU got \" + String(e));\n        await disconnectDevice(this.device).catch(() => {}); // but we ignore if disconnect worked.\n        throw e;\n      }\n    });\n\n    if (mtu > 23) {\n      const mtuSize = mtu - 3;\n      log(\n        \"ble-verbose\",\n        `BleTransport(${String(this.id)}) mtu set to ${String(mtuSize)}`\n      );\n      this.mtuSize = mtuSize;\n    }\n\n    return this.mtuSize;\n  }\n\n  setScrambleKey() {}\n\n  write = async (buffer: Buffer) => {\n    log(\"ble-frame\", \"=> \" + buffer.toString(\"hex\"));\n    try {\n      await write(this.writeCharacteristic, buffer);\n    } catch (e) {\n      throw new DisconnectedDeviceDuringOperation(e.message);\n    }\n  };\n\n  async close() {\n    if (this.exchangeBusyPromise) {\n      await this.exchangeBusyPromise;\n    }\n  }\n}\n"],"file":"TransportNodeBle.js"}