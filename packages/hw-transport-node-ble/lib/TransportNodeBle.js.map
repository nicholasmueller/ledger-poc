{"version":3,"sources":["../src/TransportNodeBle.js"],"names":["transportsCache","reconnectionConfig","pairingThreshold","delayAfterFirstPairing","setReconnectionConfig","config","delay","ms","Promise","success","setTimeout","open","deviceOrId","needsReconnect","device","CantOpenDevice","availability","pipe","enabled","toPromise","notifyC","writeC","deviceModel","observable","monitoringReady","notifyObservable","value","toString","notif","subscribe","transport","BluetoothTransport","onDisconnect","e","notYetDisconnected","unsubscribe","disconnectedSub","id","emit","beforeMTUTime","Date","now","inferMTU","afterMTUTime","catch","Transport","listen","observer","constructor","writeCharacteristic","mtuSize","exchange","apdu","exchangeAtomicImpl","msgIn","data","receiveAPDU","write","msgOut","String","buffer","DisconnectedDeviceDuringOperation","message","mtu","readUInt8","Buffer","from","setScrambleKey","close","exchangeBusyPromise","isSupported","resolve","list","Error","disconnect"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-disable prefer-template */\n\nimport Transport from \"@ledgerhq/hw-transport\";\nimport type { DeviceModel } from \"@ledgerhq/devices\";\nimport { sendAPDU } from \"@ledgerhq/devices/lib/ble/sendAPDU\";\nimport { receiveAPDU } from \"@ledgerhq/devices/lib/ble/receiveAPDU\";\nimport { log } from \"@ledgerhq/logs\";\nimport { Observable, defer, merge, from } from \"rxjs\";\nimport { share, ignoreElements, first, map, tap } from \"rxjs/operators\";\nimport {\n  CantOpenDevice,\n  DisconnectedDeviceDuringOperation,\n} from \"@ledgerhq/errors\";\nimport {\n  monitorCharacteristic,\n  availability,\n  retrieveServiceAndCharacteristics,\n  write,\n  disconnectDevice,\n  listen,\n  listenDeviceDisconnect,\n  connectDevice,\n  isDeviceDisconnected,\n} from \"./platform\";\n\ntype Device = *;\n\nconst transportsCache = {};\n\ntype ReconnectionConfig = {\n  pairingThreshold: number,\n  delayAfterFirstPairing: number,\n};\nlet reconnectionConfig: ?ReconnectionConfig = {\n  pairingThreshold: 1000,\n  delayAfterFirstPairing: 4000,\n};\nexport function setReconnectionConfig(config: ?ReconnectionConfig) {\n  reconnectionConfig = config;\n}\n\nconst delay = (ms) => new Promise((success) => setTimeout(success, ms));\n\nasync function open(deviceOrId: Device | string, needsReconnect: boolean) {\n  let device;\n  if (typeof deviceOrId === \"string\") {\n    if (transportsCache[deviceOrId]) {\n      log(\"ble-verbose\", \"Transport in cache, using that.\");\n      return transportsCache[deviceOrId];\n    }\n  } else {\n    device = deviceOrId;\n  }\n\n  if (!device) {\n    throw new CantOpenDevice();\n  }\n\n  await availability.pipe(first((enabled) => enabled)).toPromise();\n\n  if (isDeviceDisconnected(device)) {\n    log(\"ble-verbose\", \"not connected. connecting...\");\n    await connectDevice(device);\n  }\n\n  const {\n    notifyC,\n    writeC,\n    deviceModel,\n  } = await retrieveServiceAndCharacteristics(device);\n\n  const [observable, monitoringReady] = monitorCharacteristic(notifyC);\n\n  const notifyObservable = observable.pipe(\n    tap((value) => {\n      log(\"ble-frame\", \"<= \" + value.toString(\"hex\"));\n    }),\n    share()\n  );\n\n  const notif = notifyObservable.subscribe();\n\n  const transport = new BluetoothTransport(\n    device,\n    writeC,\n    notifyObservable,\n    deviceModel\n  );\n\n  const onDisconnect = (e) => {\n    transport.notYetDisconnected = false;\n    notif.unsubscribe();\n    disconnectedSub();\n    delete transportsCache[transport.id];\n    log(\"ble-verbose\", `BleTransport(${transport.id}) disconnected`);\n    transport.emit(\"disconnect\", e);\n  };\n\n  // eslint-disable-next-line require-atomic-updates\n  transportsCache[transport.id] = transport;\n  const disconnectedSub = listenDeviceDisconnect(device, (e) => {\n    if (!transport.notYetDisconnected) return;\n    onDisconnect(e);\n  });\n\n  let beforeMTUTime = Date.now();\n  try {\n    await monitoringReady;\n    await transport.inferMTU();\n  } finally {\n    let afterMTUTime = Date.now();\n\n    if (reconnectionConfig) {\n      // workaround for #279: we need to open() again if we come the first time here,\n      // to make sure we do a disconnect() after the first pairing time\n      // because of a firmware bug\n\n      if (afterMTUTime - beforeMTUTime < reconnectionConfig.pairingThreshold) {\n        needsReconnect = false; // (optim) there is likely no new pairing done because mtu answer was fast.\n      }\n\n      if (needsReconnect) {\n        // necessary time for the bonding workaround\n        await disconnectDevice(device).catch(() => {});\n        await delay(reconnectionConfig.delayAfterFirstPairing);\n      }\n    } else {\n      needsReconnect = false;\n    }\n  }\n\n  if (needsReconnect) {\n    return open(device, false);\n  }\n\n  return transport;\n}\n\n/**\n * TransportNodeBle bluetooth BLE implementation\n * @example\n * import BluetoothTransport from \"@ledgerhq/hw-transport-node-ble\";\n */\nexport default class BluetoothTransport extends Transport<Device | string> {\n  /**\n   *\n   */\n  static isSupported = (): Promise<boolean> => Promise.resolve(true);\n\n  /**\n   *\n   */\n  static availability = availability;\n\n  static list = (): * => {\n    throw new Error(\"not implemented\");\n  };\n\n  /**\n   * Scan for bluetooth Ledger devices\n   */\n  static listen(observer: *) {\n    log(\"ble-verbose\", \"listen...\");\n    return listen().subscribe(observer);\n  }\n\n  /**\n   * Open a BLE transport\n   * @param {*} deviceOrId\n   */\n  static async open(deviceOrId: Device | string) {\n    return open(deviceOrId, true);\n  }\n\n  /**\n   * Globally disconnect a BLE device by its ID\n   */\n  static disconnect = async (id: *) => {\n    log(\"ble-verbose\", `user disconnect(${id})`);\n    if (id in transportsCache) {\n      disconnectDevice(transportsCache[id].device);\n    }\n  };\n\n  id: string;\n\n  device: Device;\n\n  mtuSize: number = 20;\n\n  writeCharacteristic: *;\n\n  notifyObservable: Observable<Buffer>;\n\n  deviceModel: DeviceModel;\n\n  notYetDisconnected = true;\n\n  constructor(\n    device: Device,\n    writeCharacteristic: *,\n    notifyObservable: Observable<Buffer>,\n    deviceModel: DeviceModel\n  ) {\n    super();\n    this.id = device.id;\n    this.device = device;\n    this.writeCharacteristic = writeCharacteristic;\n    this.notifyObservable = notifyObservable;\n    this.deviceModel = deviceModel;\n    log(\"ble-verbose\", `BleTransport(${String(this.id)}) new instance`);\n  }\n\n  /**\n   * communicate with a BLE transport\n   */\n  exchange = (apdu: Buffer): Promise<Buffer> =>\n    this.exchangeAtomicImpl(async () => {\n      try {\n        const msgIn = apdu.toString(\"hex\");\n        log(\"apdu\", `=> ${msgIn}`);\n\n        const data = await merge(\n          this.notifyObservable.pipe(receiveAPDU),\n          sendAPDU(this.write, apdu, this.mtuSize)\n        ).toPromise();\n\n        const msgOut = data.toString(\"hex\");\n        log(\"apdu\", `<= ${msgOut}`);\n\n        return data;\n      } catch (e) {\n        log(\"ble-error\", \"exchange got \" + String(e));\n        if (this.notYetDisconnected) {\n          // in such case we will always disconnect because something is bad.\n          await disconnectDevice(this.device).catch(() => {}); // but we ignore if disconnect worked.\n        }\n        throw e;\n      }\n    });\n\n  // TODO we probably will do this at end of open\n  async inferMTU() {\n    let { mtu } = this.device;\n    await this.exchangeAtomicImpl(async () => {\n      try {\n        mtu =\n          (await merge(\n            this.notifyObservable.pipe(\n              first((buffer) => buffer.readUInt8(0) === 0x08),\n              map((buffer) => buffer.readUInt8(5))\n            ),\n            defer(() => from(this.write(Buffer.from([0x08, 0, 0, 0, 0])))).pipe(\n              ignoreElements()\n            )\n          ).toPromise()) + 3;\n      } catch (e) {\n        log(\"ble-error\", \"inferMTU got \" + String(e));\n        await disconnectDevice(this.device).catch(() => {}); // but we ignore if disconnect worked.\n        throw e;\n      }\n    });\n\n    if (mtu > 23) {\n      const mtuSize = mtu - 3;\n      log(\n        \"ble-verbose\",\n        `BleTransport(${String(this.id)}) mtu set to ${String(mtuSize)}`\n      );\n      this.mtuSize = mtuSize;\n    }\n\n    return this.mtuSize;\n  }\n\n  setScrambleKey() {}\n\n  write = async (buffer: Buffer) => {\n    log(\"ble-frame\", \"=> \" + buffer.toString(\"hex\"));\n    try {\n      await write(this.writeCharacteristic, buffer);\n    } catch (e) {\n      throw new DisconnectedDeviceDuringOperation(e.message);\n    }\n  };\n\n  async close() {\n    if (this.exchangeBusyPromise) {\n      await this.exchangeBusyPromise;\n    }\n  }\n}\n"],"file":"TransportNodeBle.js"}