{"version":3,"sources":["../src/platform.js"],"names":["noble","on","message","POWERED_ON","availability","Observable","create","observer","onAvailabilityChanged","e","next","addListener","state","removeListener","listenDeviceDisconnect","device","onDisconnect","connectDevice","Promise","resolve","reject","connect","error","disconnectDevice","disconnect","isDeviceDisconnected","discoverDeviceServices","discoverServices","services","discoverServiceCharacteristics","service","discoverCharacteristics","chs","listen","discoveredDevices","onDiscover","peripheral","uuid","id","localName","advertisement","name","String","type","descriptor","startScanning","stopScanning","retrieveServiceAndCharacteristics","infos","TransportError","characteristics","writeC","notifyC","c","writeUuid","replace","notifyUuid","deviceModel","monitorCharacteristic","characteristic","readyness","res","rej","observable","o","onCharacteristicValueChanged","data","Buffer","from","onSubscribe","subscribe","unsubscribe","write","writeCharacteristic","buffer"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-disable prefer-template */\n\nimport noble from \"@abandonware/noble\";\nimport { Observable } from \"rxjs\";\nimport { log } from \"@ledgerhq/logs\";\nimport {\n  getInfosForServiceUuid,\n  getBluetoothServiceUuids,\n} from \"@ledgerhq/devices\";\nimport { TransportError } from \"@ledgerhq/errors\";\n\nnoble.on(\"warning\", (message) => {\n  log(\"ble-warning\", message);\n});\n\nconst POWERED_ON = \"poweredOn\";\n\nexport const availability: Observable<boolean> = Observable.create(\n  (observer) => {\n    const onAvailabilityChanged = (e) => {\n      observer.next(e === POWERED_ON);\n    };\n    noble.addListener(\"stateChanged\", onAvailabilityChanged); // events lib?\n    observer.next(noble.state === POWERED_ON);\n    return () => {\n      noble.removeListener(\"stateChanged\", onAvailabilityChanged);\n    };\n  }\n);\n\nexport const listenDeviceDisconnect = (device: *, onDisconnect: *) => {\n  device.addListener(\"disconnect\", onDisconnect);\n  return () => {\n    device.removeListener(\"disconnect\", onDisconnect);\n  };\n};\n\nexport const connectDevice = (device: *): Promise<void> =>\n  new Promise((resolve, reject) => {\n    device.connect((error) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve();\n      }\n    });\n  });\n\nexport const disconnectDevice = (device: *): Promise<void> =>\n  new Promise((resolve, reject) => {\n    device.disconnect((error) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve();\n      }\n    });\n  });\n\nexport const isDeviceDisconnected = (device: *): boolean =>\n  device.state === \"disconnected\";\n\nconst discoverDeviceServices = (device) =>\n  new Promise((resolve, reject) =>\n    device.discoverServices(null, (error, services) => {\n      if (error) reject(error);\n      else resolve(services);\n    })\n  );\n\nconst discoverServiceCharacteristics = (service) =>\n  new Promise((resolve, reject) =>\n    service.discoverCharacteristics(null, (error, chs) => {\n      if (error) reject(error);\n      else resolve(chs);\n    })\n  );\n\nexport const listen = (): Observable<*> =>\n  Observable.create((observer) => {\n    const discoveredDevices = {};\n\n    const onDiscover = (peripheral) => {\n      const { uuid: id } = peripheral;\n      const { localName } = peripheral.advertisement;\n      const name =\n        localName ||\n        (discoveredDevices[id] ? discoveredDevices[id].name : null);\n      discoveredDevices[id] = { peripheral, name };\n      log(\"ble-advertisement\", id + \" (\" + String(name) + \")\");\n      observer.next({\n        type: \"add\",\n        descriptor: peripheral,\n        device: { id, name },\n      });\n    };\n\n    noble.addListener(\"discover\", onDiscover);\n    noble.startScanning(getBluetoothServiceUuids(), true);\n\n    return () => {\n      noble.removeListener(\"discover\", onDiscover);\n      noble.stopScanning();\n    };\n  });\n\nexport const retrieveServiceAndCharacteristics = async (device: *) => {\n  const [service] = await discoverDeviceServices(device);\n  const infos = getInfosForServiceUuid(service.uuid);\n  if (!infos) {\n    throw new TransportError(\"service not found\", \"BLEServiceNotFound\");\n  }\n  const characteristics = await discoverServiceCharacteristics(service);\n  let writeC;\n  let notifyC;\n  for (const c of characteristics) {\n    if (c.uuid === infos.writeUuid.replace(/-/g, \"\")) {\n      writeC = c;\n    } else if (c.uuid === infos.notifyUuid.replace(/-/g, \"\")) {\n      notifyC = c;\n    }\n  }\n  if (!writeC || !notifyC) {\n    throw new TransportError(\n      \"missing characteristics\",\n      \"BLEMissingCharacteristics\"\n    );\n  }\n  return {\n    writeC,\n    notifyC,\n    deviceModel: infos.deviceModel,\n  };\n};\n\nexport const monitorCharacteristic = (\n  characteristic: *\n): [Observable<Buffer>, Promise<void>] => {\n  let resolve;\n  let reject;\n  const readyness = new Promise((res, rej) => {\n    resolve = res;\n    reject = rej;\n  });\n\n  const observable = Observable.create((o) => {\n    function onCharacteristicValueChanged(data) {\n      o.next(Buffer.from(data));\n    }\n\n    function onSubscribe(error) {\n      if (error) {\n        reject(error);\n        o.error(error);\n      } else {\n        resolve();\n        log(\"verbose\", \"start monitor \" + characteristic.uuid);\n      }\n    }\n\n    characteristic.on(\"data\", onCharacteristicValueChanged);\n    characteristic.subscribe(onSubscribe);\n\n    return () => {\n      log(\"verbose\", \"end monitor \" + characteristic.uuid);\n      characteristic.removeListener(\"data\", onCharacteristicValueChanged);\n      characteristic.unsubscribe();\n    };\n  });\n\n  return [observable, readyness];\n};\n\nexport const write = (writeCharacteristic: *, buffer: Buffer): Promise<void> =>\n  new Promise((resolve, reject) => {\n    writeCharacteristic.write(buffer, false, (e) => {\n      if (e) reject(e);\n      else resolve();\n    });\n  });\n"],"file":"platform.js"}