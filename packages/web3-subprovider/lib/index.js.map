{"version":3,"sources":["../src/index.js"],"names":["makeError","msg","id","err","Error","defaultOptions","networkId","paths","askConfirm","accountsLength","accountsOffset","createLedgerSubprovider","getTransport","options","length","addressToPathMap","getAccounts","transport","eth","AppEth","addresses","i","x","Math","floor","pathIndex","path","replace","String","address","getAddress","toLowerCase","close","signPersonalMessage","msgData","from","result","data","v","parseInt","vHex","toString","r","s","signTransaction","txData","tx","EthereumTx","chain","raw","Buffer","serialize","signedChainId","validChainId","subprovider","HookedWalletSubprovider","callback","then","res","Object","values","catch"],"mappings":"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","sourcesContent":["//@flow\nimport AppEth from \"@ledgerhq/hw-app-eth\";\nimport type Transport from \"@ledgerhq/hw-transport\";\nimport HookedWalletSubprovider from \"web3-provider-engine/subproviders/hooked-wallet\";\nimport stripHexPrefix from \"strip-hex-prefix\";\nimport { Transaction as EthereumTx } from \"ethereumjs-tx\";\n\nfunction makeError(msg, id) {\n  const err = new Error(msg);\n  // $FlowFixMe\n  err.id = id;\n  return err;\n}\n\n/**\n */\ntype SubproviderOptions = {\n  // refer to https://github.com/ethereum/EIPs/blob/master/EIPS/eip-155.md\n  networkId: number,\n  // derivation path schemes (with a x in the path)\n  paths?: string[],\n  // should use actively validate on the device\n  askConfirm?: boolean,\n  // number of accounts to derivate\n  accountsLength?: number,\n  // offset index to use to start derivating the accounts\n  accountsOffset?: number,\n};\n\nconst defaultOptions = {\n  networkId: 1, // mainnet\n  paths: [\"44'/60'/x'/0/0\", \"44'/60'/0'/x\"], // ledger live derivation path\n  askConfirm: false,\n  accountsLength: 1,\n  accountsOffset: 0,\n};\n\n/**\n * Create a HookedWalletSubprovider for Ledger devices.\n * @param getTransport gets lazily called each time the device is needed. It is a function that returns a Transport instance. You can typically give `()=>TransportU2F.create()`\n * @example\nimport Web3 from \"web3\";\nimport createLedgerSubprovider from \"@ledgerhq/web3-subprovider\";\nimport TransportU2F from \"@ledgerhq/hw-transport-u2f\";\nimport ProviderEngine from \"web3-provider-engine\";\nimport RpcSubprovider from \"web3-provider-engine/subproviders/rpc\";\nconst engine = new ProviderEngine();\nconst getTransport = () => TransportU2F.create();\nconst ledger = createLedgerSubprovider(getTransport, {\n  accountsLength: 5\n});\nengine.addProvider(ledger);\nengine.addProvider(new RpcSubprovider({ rpcUrl }));\nengine.start();\nconst web3 = new Web3(engine);\n */\nexport default function createLedgerSubprovider(\n  getTransport: () => Transport<*>,\n  options?: SubproviderOptions\n): HookedWalletSubprovider {\n  if (options && \"path\" in options) {\n    throw new Error(\n      \"@ledgerhq/web3-subprovider: path options was replaced by paths. example: paths: [\\\"44'/60'/x'/0/0\\\"]\"\n    );\n  }\n  const { networkId, paths, askConfirm, accountsLength, accountsOffset } = {\n    ...defaultOptions,\n    ...options,\n  };\n\n  if (!paths.length) {\n    throw new Error(\"paths must not be empty\");\n  }\n\n  const addressToPathMap = {};\n\n  async function getAccounts() {\n    const transport = await getTransport();\n    try {\n      const eth = new AppEth(transport);\n      const addresses = {};\n      for (let i = accountsOffset; i < accountsOffset + accountsLength; i++) {\n        const x = Math.floor(i / paths.length);\n        const pathIndex = i - paths.length * x;\n        const path = paths[pathIndex].replace(\"x\", String(x));\n        const address = await eth.getAddress(path, askConfirm, false);\n        addresses[path] = address.address;\n        addressToPathMap[address.address.toLowerCase()] = path;\n      }\n      return addresses;\n    } finally {\n      transport.close();\n    }\n  }\n\n  async function signPersonalMessage(msgData) {\n    const path = addressToPathMap[msgData.from.toLowerCase()];\n    if (!path) throw new Error(\"address unknown '\" + msgData.from + \"'\");\n    const transport = await getTransport();\n    try {\n      const eth = new AppEth(transport);\n      const result = await eth.signPersonalMessage(\n        path,\n        stripHexPrefix(msgData.data)\n      );\n      const v = parseInt(result.v, 10) - 27;\n      let vHex = v.toString(16);\n      if (vHex.length < 2) {\n        vHex = `0${v}`;\n      }\n      return `0x${result.r}${result.s}${vHex}`;\n    } finally {\n      transport.close();\n    }\n  }\n\n  async function signTransaction(txData) {\n    const path = addressToPathMap[txData.from.toLowerCase()];\n    if (!path) throw new Error(\"address unknown '\" + txData.from + \"'\");\n    const transport = await getTransport();\n    try {\n      const eth = new AppEth(transport);\n      const tx = new EthereumTx(txData, { chain: networkId });\n\n      // Set the EIP155 bits\n      tx.raw[6] = Buffer.from([networkId]); // v\n      tx.raw[7] = Buffer.from([]); // r\n      tx.raw[8] = Buffer.from([]); // s\n\n      // Pass hex-rlp to ledger for signing\n      const result = await eth.signTransaction(\n        path,\n        tx.serialize().toString(\"hex\")\n      );\n\n      // Store signature in transaction\n      tx.v = Buffer.from(result.v, \"hex\");\n      tx.r = Buffer.from(result.r, \"hex\");\n      tx.s = Buffer.from(result.s, \"hex\");\n\n      // EIP155: v should be chain_id * 2 + {35, 36}\n      const signedChainId = Math.floor((tx.v[0] - 35) / 2);\n      const validChainId = networkId & 0xff; // FIXME this is to fixed a current workaround that app don't support > 0xff\n      if (signedChainId !== validChainId) {\n        throw makeError(\n          \"Invalid networkId signature returned. Expected: \" +\n            networkId +\n            \", Got: \" +\n            signedChainId,\n          \"InvalidNetworkId\"\n        );\n      }\n\n      return `0x${tx.serialize().toString(\"hex\")}`;\n    } finally {\n      transport.close();\n    }\n  }\n\n  const subprovider = new HookedWalletSubprovider({\n    getAccounts: (callback) => {\n      getAccounts()\n        .then((res) => callback(null, Object.values(res)))\n        .catch((err) => callback(err, null));\n    },\n    signPersonalMessage: (txData, callback) => {\n      signPersonalMessage(txData)\n        .then((res) => callback(null, res))\n        .catch((err) => callback(err, null));\n    },\n    signTransaction: (txData, callback) => {\n      signTransaction(txData)\n        .then((res) => callback(null, res))\n        .catch((err) => callback(err, null));\n    },\n  });\n\n  return subprovider;\n}\n"],"file":"index.js"}