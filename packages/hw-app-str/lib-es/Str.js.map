{"version":3,"sources":["../src/Str.js"],"names":["splitPath","foreach","encodeEd25519PublicKey","verifyEd25519Signature","checkStellarBip32Path","hash","CLA","INS_GET_PK","INS_SIGN_TX","INS_GET_CONF","INS_SIGN_TX_HASH","INS_KEEP_ALIVE","APDU_MAX_SIZE","P1_FIRST_APDU","P1_MORE_APDU","P2_LAST_APDU","P2_MORE_APDU","SW_OK","SW_CANCEL","SW_UNKNOWN_OP","SW_MULTI_OP","SW_NOT_ALLOWED","SW_UNSUPPORTED","SW_KEEP_ALIVE","TX_MAX_SIZE","Str","constructor","transport","scrambleKey","decorateAppAPIMethods","getAppConfiguration","send","then","response","multiOpsEnabled","version","getPublicKey","path","boolValidate","boolDisplay","apdus","pathElts","buffer","Buffer","alloc","length","forEach","element","index","writeUInt32BE","verifyMsg","from","push","concat","keepAlive","data","apduResponse","status","slice","readUInt16BE","offset","rawPublicKey","publicKey","signature","Error","raw","signTransaction","transaction","bufferSize","chunkSize","chunk","copy","remaining","i","signHash_private","signHash"],"mappings":"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","sourcesContent":["/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2017-2018 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//@flow\n\nimport type Transport from \"@ledgerhq/hw-transport\";\nimport {\n  splitPath,\n  foreach,\n  encodeEd25519PublicKey,\n  verifyEd25519Signature,\n  checkStellarBip32Path,\n  hash,\n} from \"./utils\";\n\nconst CLA = 0xe0;\nconst INS_GET_PK = 0x02;\nconst INS_SIGN_TX = 0x04;\nconst INS_GET_CONF = 0x06;\nconst INS_SIGN_TX_HASH = 0x08;\nconst INS_KEEP_ALIVE = 0x10;\n\nconst APDU_MAX_SIZE = 150;\nconst P1_FIRST_APDU = 0x00;\nconst P1_MORE_APDU = 0x80;\nconst P2_LAST_APDU = 0x00;\nconst P2_MORE_APDU = 0x80;\n\nconst SW_OK = 0x9000;\nconst SW_CANCEL = 0x6985;\nconst SW_UNKNOWN_OP = 0x6c24;\nconst SW_MULTI_OP = 0x6c25;\nconst SW_NOT_ALLOWED = 0x6c66;\nconst SW_UNSUPPORTED = 0x6d00;\nconst SW_KEEP_ALIVE = 0x6e02;\n\nconst TX_MAX_SIZE = 1540;\n\n/**\n * Stellar API\n *\n * @example\n * import Str from \"@ledgerhq/hw-app-str\";\n * const str = new Str(transport)\n */\nexport default class Str {\n  transport: Transport<*>;\n\n  constructor(transport: Transport<*>, scrambleKey: string = \"l0v\") {\n    this.transport = transport;\n    transport.decorateAppAPIMethods(\n      this,\n      [\"getAppConfiguration\", \"getPublicKey\", \"signTransaction\", \"signHash\"],\n      scrambleKey\n    );\n  }\n\n  getAppConfiguration(): Promise<{\n    version: string,\n  }> {\n    return this.transport\n      .send(CLA, INS_GET_CONF, 0x00, 0x00)\n      .then((response) => {\n        let multiOpsEnabled = response[0] === 0x01 || response[1] < 0x02;\n        let version = \"\" + response[1] + \".\" + response[2] + \".\" + response[3];\n        return {\n          version: version,\n          multiOpsEnabled: multiOpsEnabled,\n        };\n      });\n  }\n\n  /**\n   * get Stellar public key for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolValidate optionally enable key pair validation\n   * @option boolDisplay optionally enable or not the display\n   * @return an object with the publicKey (using XLM public key format) and\n   * the raw ed25519 public key.\n   * @example\n   * str.getPublicKey(\"44'/148'/0'\").then(o => o.publicKey)\n   */\n  getPublicKey(\n    path: string,\n    boolValidate?: boolean,\n    boolDisplay?: boolean\n  ): Promise<{ publicKey: string, raw: Buffer }> {\n    checkStellarBip32Path(path);\n\n    let apdus = [];\n    let response;\n\n    let pathElts = splitPath(path);\n    let buffer = Buffer.alloc(1 + pathElts.length * 4);\n    buffer[0] = pathElts.length;\n    pathElts.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    let verifyMsg = Buffer.from(\"via lumina\", \"ascii\");\n    apdus.push(Buffer.concat([buffer, verifyMsg]));\n    let keepAlive = false;\n    return foreach(apdus, (data) =>\n      this.transport\n        .send(\n          CLA,\n          keepAlive ? INS_KEEP_ALIVE : INS_GET_PK,\n          boolValidate ? 0x01 : 0x00,\n          boolDisplay ? 0x01 : 0x00,\n          data,\n          [SW_OK, SW_KEEP_ALIVE]\n        )\n        .then((apduResponse) => {\n          let status = Buffer.from(\n            apduResponse.slice(apduResponse.length - 2)\n          ).readUInt16BE(0);\n          if (status === SW_KEEP_ALIVE) {\n            keepAlive = true;\n            apdus.push(Buffer.alloc(0));\n          }\n          response = apduResponse;\n        })\n    ).then(() => {\n      // response = Buffer.from(response, 'hex');\n      let offset = 0;\n      let rawPublicKey = response.slice(offset, offset + 32);\n      offset += 32;\n      let publicKey = encodeEd25519PublicKey(rawPublicKey);\n      if (boolValidate) {\n        let signature = response.slice(offset, offset + 64);\n        if (!verifyEd25519Signature(verifyMsg, signature, rawPublicKey)) {\n          throw new Error(\n            \"Bad signature. Keypair is invalid. Please report this.\"\n          );\n        }\n      }\n      return {\n        publicKey: publicKey,\n        raw: rawPublicKey,\n      };\n    });\n  }\n\n  /**\n   * sign a Stellar transaction.\n   * @param path a path in BIP 32 format\n   * @param transaction signature base of the transaction to sign\n   * @return an object with the signature and the status\n   * @example\n   * str.signTransaction(\"44'/148'/0'\", signatureBase).then(o => o.signature)\n   */\n  signTransaction(\n    path: string,\n    transaction: Buffer\n  ): Promise<{ signature: Buffer }> {\n    checkStellarBip32Path(path);\n\n    if (transaction.length > TX_MAX_SIZE) {\n      throw new Error(\n        \"Transaction too large: max = \" +\n          TX_MAX_SIZE +\n          \"; actual = \" +\n          transaction.length\n      );\n    }\n\n    let apdus = [];\n    let response;\n\n    let pathElts = splitPath(path);\n    let bufferSize = 1 + pathElts.length * 4;\n    let buffer = Buffer.alloc(bufferSize);\n    buffer[0] = pathElts.length;\n    pathElts.forEach(function (element, index) {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    let chunkSize = APDU_MAX_SIZE - bufferSize;\n    if (transaction.length <= chunkSize) {\n      // it fits in a single apdu\n      apdus.push(Buffer.concat([buffer, transaction]));\n    } else {\n      // we need to send multiple apdus to transmit the entire transaction\n      let chunk = Buffer.alloc(chunkSize);\n      let offset = 0;\n      transaction.copy(chunk, 0, offset, chunkSize);\n      apdus.push(Buffer.concat([buffer, chunk]));\n      offset += chunkSize;\n      while (offset < transaction.length) {\n        let remaining = transaction.length - offset;\n        chunkSize = remaining < APDU_MAX_SIZE ? remaining : APDU_MAX_SIZE;\n        chunk = Buffer.alloc(chunkSize);\n        transaction.copy(chunk, 0, offset, offset + chunkSize);\n        offset += chunkSize;\n        apdus.push(chunk);\n      }\n    }\n    let keepAlive = false;\n    return foreach(apdus, (data, i) =>\n      this.transport\n        .send(\n          CLA,\n          keepAlive ? INS_KEEP_ALIVE : INS_SIGN_TX,\n          i === 0 ? P1_FIRST_APDU : P1_MORE_APDU,\n          i === apdus.length - 1 ? P2_LAST_APDU : P2_MORE_APDU,\n          data,\n          [SW_OK, SW_CANCEL, SW_UNKNOWN_OP, SW_MULTI_OP, SW_KEEP_ALIVE]\n        )\n        .then((apduResponse) => {\n          let status = Buffer.from(\n            apduResponse.slice(apduResponse.length - 2)\n          ).readUInt16BE(0);\n          if (status === SW_KEEP_ALIVE) {\n            keepAlive = true;\n            apdus.push(Buffer.alloc(0));\n          }\n          response = apduResponse;\n        })\n    ).then(() => {\n      let status = Buffer.from(\n        response.slice(response.length - 2)\n      ).readUInt16BE(0);\n      if (status === SW_OK) {\n        let signature = Buffer.from(response.slice(0, response.length - 2));\n        return {\n          signature: signature,\n        };\n      } else if (status === SW_UNKNOWN_OP) {\n        // pre-v2 app version: fall back on hash signing\n        return this.signHash_private(path, hash(transaction));\n      } else if (status === SW_MULTI_OP) {\n        // multi-operation transaction: attempt hash signing\n        return this.signHash_private(path, hash(transaction));\n      } else {\n        throw new Error(\"Transaction approval request was rejected\");\n      }\n    });\n  }\n\n  /**\n   * sign a Stellar transaction hash.\n   * @param path a path in BIP 32 format\n   * @param hash hash of the transaction to sign\n   * @return an object with the signature\n   * @example\n   * str.signHash(\"44'/148'/0'\", hash).then(o => o.signature)\n   */\n  signHash(path: string, hash: Buffer): Promise<{ signature: Buffer }> {\n    checkStellarBip32Path(path);\n    return this.signHash_private(path, hash);\n  }\n\n  signHash_private(path: string, hash: Buffer): Promise<{ signature: Buffer }> {\n    let apdus = [];\n    let response;\n\n    let pathElts = splitPath(path);\n    let buffer = Buffer.alloc(1 + pathElts.length * 4);\n    buffer[0] = pathElts.length;\n    pathElts.forEach(function (element, index) {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    apdus.push(Buffer.concat([buffer, hash]));\n    let keepAlive = false;\n    return foreach(apdus, (data) =>\n      this.transport\n        .send(\n          CLA,\n          keepAlive ? INS_KEEP_ALIVE : INS_SIGN_TX_HASH,\n          0x00,\n          0x00,\n          data,\n          [SW_OK, SW_CANCEL, SW_NOT_ALLOWED, SW_UNSUPPORTED, SW_KEEP_ALIVE]\n        )\n        .then((apduResponse) => {\n          let status = Buffer.from(\n            apduResponse.slice(apduResponse.length - 2)\n          ).readUInt16BE(0);\n          if (status === SW_KEEP_ALIVE) {\n            keepAlive = true;\n            apdus.push(Buffer.alloc(0));\n          }\n          response = apduResponse;\n        })\n    ).then(() => {\n      let status = Buffer.from(\n        response.slice(response.length - 2)\n      ).readUInt16BE(0);\n      if (status === SW_OK) {\n        let signature = Buffer.from(response.slice(0, response.length - 2));\n        return {\n          signature: signature,\n        };\n      } else if (status === SW_CANCEL) {\n        throw new Error(\"Transaction approval request was rejected\");\n      } else if (status === SW_UNSUPPORTED) {\n        throw new Error(\"Hash signing is not supported\");\n      } else {\n        throw new Error(\n          \"Hash signing not allowed. Have you enabled it in the app settings?\"\n        );\n      }\n    });\n  }\n}\n"],"file":"Str.js"}