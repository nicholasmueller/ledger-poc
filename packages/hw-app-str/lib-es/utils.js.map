{"version":3,"sources":["../src/utils.js"],"names":["base32","nacl","sha256","splitPath","path","result","components","split","forEach","element","number","parseInt","isNaN","length","push","foreach","arr","callback","iterate","index","array","then","res","Promise","resolve","crc16xmodem","buf","previous","crc","byte","code","encodeEd25519PublicKey","rawPublicKey","versionByte","data","Buffer","from","versionBuffer","payload","concat","checksum","alloc","writeUInt16LE","unencoded","encode","verifyEd25519Signature","signature","publicKey","sign","detached","verify","Uint8Array","toJSON","hash","hasher","update","digest","checkStellarBip32Path","toString","endsWith","Error"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,OAAOA,MAAP,MAAmB,WAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,MAAT,QAAuB,QAAvB,C,CAEA;;AACA,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAA2C;AAChD,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,UAAU,GAAGF,IAAI,CAACG,KAAL,CAAW,GAAX,CAAjB;AACAD,EAAAA,UAAU,CAACE,OAAX,CAAoBC,OAAD,IAAa;AAC9B,QAAIC,MAAM,GAAGC,QAAQ,CAACF,OAAD,EAAU,EAAV,CAArB;;AACA,QAAIG,KAAK,CAACF,MAAD,CAAT,EAAmB;AACjB,aADiB,CACT;AACT;;AACD,QAAID,OAAO,CAACI,MAAR,GAAiB,CAAjB,IAAsBJ,OAAO,CAACA,OAAO,CAACI,MAAR,GAAiB,CAAlB,CAAP,KAAgC,GAA1D,EAA+D;AAC7DH,MAAAA,MAAM,IAAI,UAAV;AACD;;AACDL,IAAAA,MAAM,CAACS,IAAP,CAAYJ,MAAZ;AACD,GATD;AAUA,SAAOL,MAAP;AACD;AAED,OAAO,SAASU,OAAT,CACLC,GADK,EAELC,QAFK,EAGS;AACd,WAASC,OAAT,CAAiBC,KAAjB,EAAwBC,KAAxB,EAA+Bf,MAA/B,EAAuC;AACrC,QAAIc,KAAK,IAAIC,KAAK,CAACP,MAAnB,EAA2B;AACzB,aAAOR,MAAP;AACD,KAFD,MAEO;AACL,aAAOY,QAAQ,CAACG,KAAK,CAACD,KAAD,CAAN,EAAeA,KAAf,CAAR,CAA8BE,IAA9B,CAAmC,UAAUC,GAAV,EAAe;AACvDjB,QAAAA,MAAM,CAACS,IAAP,CAAYQ,GAAZ;AACA,eAAOJ,OAAO,CAACC,KAAK,GAAG,CAAT,EAAYC,KAAZ,EAAmBf,MAAnB,CAAd;AACD,OAHM,CAAP;AAID;AACF;;AACD,SAAOkB,OAAO,CAACC,OAAR,GAAkBH,IAAlB,CAAuB,MAAMH,OAAO,CAAC,CAAD,EAAIF,GAAJ,EAAS,EAAT,CAApC,CAAP;AACD;AAED,OAAO,SAASS,WAAT,CAAqBC,GAArB,EAAkCC,QAAlC,EAA6D;AAClE,MAAIC,GAAG,GAAG,OAAOD,QAAP,KAAoB,WAApB,GAAkC,CAAC,CAACA,QAApC,GAA+C,GAAzD;;AAEA,OAAK,IAAIR,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGO,GAAG,CAACb,MAAhC,EAAwCM,KAAK,EAA7C,EAAiD;AAC/C,UAAMU,IAAI,GAAGH,GAAG,CAACP,KAAD,CAAhB;AACA,QAAIW,IAAI,GAAIF,GAAG,KAAK,CAAT,GAAc,IAAzB;AAEAE,IAAAA,IAAI,IAAID,IAAI,GAAG,IAAf;AACAC,IAAAA,IAAI,IAAIA,IAAI,KAAK,CAAjB;AACAF,IAAAA,GAAG,GAAIA,GAAG,IAAI,CAAR,GAAa,MAAnB;AACAA,IAAAA,GAAG,IAAIE,IAAP;AACAA,IAAAA,IAAI,GAAIA,IAAI,IAAI,CAAT,GAAc,MAArB;AACAF,IAAAA,GAAG,IAAIE,IAAP;AACAA,IAAAA,IAAI,GAAIA,IAAI,IAAI,CAAT,GAAc,MAArB;AACAF,IAAAA,GAAG,IAAIE,IAAP;AACD;;AAED,SAAOF,GAAP;AACD;AAED,OAAO,SAASG,sBAAT,CAAgCC,YAAhC,EAA8D;AACnE,MAAIC,WAAW,GAAG,KAAK,CAAvB,CADmE,CACzC;;AAC1B,MAAIC,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAYJ,YAAZ,CAAX;AACA,MAAIK,aAAa,GAAGF,MAAM,CAACC,IAAP,CAAY,CAACH,WAAD,CAAZ,CAApB;AACA,MAAIK,OAAO,GAAGH,MAAM,CAACI,MAAP,CAAc,CAACF,aAAD,EAAgBH,IAAhB,CAAd,CAAd;AACA,MAAIM,QAAQ,GAAGL,MAAM,CAACM,KAAP,CAAa,CAAb,CAAf;AACAD,EAAAA,QAAQ,CAACE,aAAT,CAAuBjB,WAAW,CAACa,OAAD,CAAlC,EAA6C,CAA7C;AACA,MAAIK,SAAS,GAAGR,MAAM,CAACI,MAAP,CAAc,CAACD,OAAD,EAAUE,QAAV,CAAd,CAAhB;AACA,SAAOxC,MAAM,CAAC4C,MAAP,CAAcD,SAAd,CAAP;AACD;AAED,OAAO,SAASE,sBAAT,CACLX,IADK,EAELY,SAFK,EAGLC,SAHK,EAII;AACT,SAAO9C,IAAI,CAAC+C,IAAL,CAAUC,QAAV,CAAmBC,MAAnB,CACL,IAAIC,UAAJ,CAAejB,IAAI,CAACkB,MAAL,GAAclB,IAA7B,CADK,EAEL,IAAIiB,UAAJ,CAAeL,SAAS,CAACM,MAAV,GAAmBlB,IAAlC,CAFK,EAGL,IAAIiB,UAAJ,CAAeJ,SAAS,CAACK,MAAV,GAAmBlB,IAAlC,CAHK,CAAP;AAKD;AAED,OAAO,SAASmB,IAAT,CAAcnB,IAAd,EAA4B;AACjC,MAAIoB,MAAM,GAAG,IAAIpD,MAAJ,EAAb;AACAoD,EAAAA,MAAM,CAACC,MAAP,CAAcrB,IAAd,EAAoB,MAApB;AACA,SAAOoB,MAAM,CAACE,MAAP,EAAP;AACD;AAED,OAAO,SAASC,qBAAT,CAA+BrD,IAA/B,EAAmD;AACxDA,EAAAA,IAAI,CAACG,KAAL,CAAW,GAAX,EAAgBC,OAAhB,CAAwB,UAAUC,OAAV,EAAmB;AACzC,QAAI,CAACA,OAAO,CAACiD,QAAR,GAAmBC,QAAnB,CAA4B,GAA5B,CAAL,EAAuC;AACrC,YAAM,IAAIC,KAAJ,CACJ,kEACE,uFADF,GAEE,uBAHE,CAAN;AAKD;AACF,GARD;AASD","sourcesContent":["/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2017-2018 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//@flow\n\nimport base32 from \"base32.js\";\nimport nacl from \"tweetnacl\";\nimport { sha256 } from \"sha.js\";\n\n// TODO use bip32-path library\nexport function splitPath(path: string): number[] {\n  let result = [];\n  let components = path.split(\"/\");\n  components.forEach((element) => {\n    let number = parseInt(element, 10);\n    if (isNaN(number)) {\n      return; // FIXME shouldn't it throws instead?\n    }\n    if (element.length > 1 && element[element.length - 1] === \"'\") {\n      number += 0x80000000;\n    }\n    result.push(number);\n  });\n  return result;\n}\n\nexport function foreach<T, A>(\n  arr: T[],\n  callback: (T, number) => Promise<A>\n): Promise<A[]> {\n  function iterate(index, array, result) {\n    if (index >= array.length) {\n      return result;\n    } else {\n      return callback(array[index], index).then(function (res) {\n        result.push(res);\n        return iterate(index + 1, array, result);\n      });\n    }\n  }\n  return Promise.resolve().then(() => iterate(0, arr, []));\n}\n\nexport function crc16xmodem(buf: Buffer, previous?: number): number {\n  let crc = typeof previous !== \"undefined\" ? ~~previous : 0x0;\n\n  for (var index = 0; index < buf.length; index++) {\n    const byte = buf[index];\n    let code = (crc >>> 8) & 0xff;\n\n    code ^= byte & 0xff;\n    code ^= code >>> 4;\n    crc = (crc << 8) & 0xffff;\n    crc ^= code;\n    code = (code << 5) & 0xffff;\n    crc ^= code;\n    code = (code << 7) & 0xffff;\n    crc ^= code;\n  }\n\n  return crc;\n}\n\nexport function encodeEd25519PublicKey(rawPublicKey: Buffer): string {\n  let versionByte = 6 << 3; // 'G'\n  let data = Buffer.from(rawPublicKey);\n  let versionBuffer = Buffer.from([versionByte]);\n  let payload = Buffer.concat([versionBuffer, data]);\n  let checksum = Buffer.alloc(2);\n  checksum.writeUInt16LE(crc16xmodem(payload), 0);\n  let unencoded = Buffer.concat([payload, checksum]);\n  return base32.encode(unencoded);\n}\n\nexport function verifyEd25519Signature(\n  data: Buffer,\n  signature: Buffer,\n  publicKey: Buffer\n): boolean {\n  return nacl.sign.detached.verify(\n    new Uint8Array(data.toJSON().data),\n    new Uint8Array(signature.toJSON().data),\n    new Uint8Array(publicKey.toJSON().data)\n  );\n}\n\nexport function hash(data: Buffer) {\n  let hasher = new sha256();\n  hasher.update(data, \"utf8\");\n  return hasher.digest();\n}\n\nexport function checkStellarBip32Path(path: string): void {\n  path.split(\"/\").forEach(function (element) {\n    if (!element.toString().endsWith(\"'\")) {\n      throw new Error(\n        \"Detected a non-hardened path element in requested BIP32 path.\" +\n          \" Non-hardended paths are not supported at this time. Please use an all-hardened path.\" +\n          \" Example: 44'/148'/0'\"\n      );\n    }\n  });\n}\n"],"file":"utils.js"}