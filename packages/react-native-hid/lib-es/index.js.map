{"version":3,"sources":["../src/index.js"],"names":["NativeModules","DeviceEventEmitter","ledgerUSBVendorId","identifyUSBProductId","DisconnectedDeviceDuringOperation","DisconnectedDevice","log","Transport","Subject","from","concat","mergeMap","disconnectedErrors","listLedgerDevices","devices","HID","getDeviceList","filter","d","vendorId","liveDeviceEventsSubject","addListener","device","deviceModel","productId","next","type","descriptor","liveDeviceEvents","HIDTransport","constructor","nativeId","id","list","Promise","resolve","listen","observer","unsubscribe","pipe","map","subscribe","open","deviceObj","nativeObj","openDevice","error","includes","message","exchange","apdu","exchangeAtomicImpl","apduHex","toString","resultHex","res","Buffer","emit","close","exchangeBusyPromise","closeDevice","setScrambleKey","isSupported"],"mappings":"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","sourcesContent":["//@flow\nimport { NativeModules, DeviceEventEmitter } from \"react-native\";\nimport { ledgerUSBVendorId, identifyUSBProductId } from \"@ledgerhq/devices\";\nimport type { DeviceModel } from \"@ledgerhq/devices\";\nimport {\n  DisconnectedDeviceDuringOperation,\n  DisconnectedDevice,\n} from \"@ledgerhq/errors\";\nimport { log } from \"@ledgerhq/logs\";\nimport Transport from \"@ledgerhq/hw-transport\";\nimport type { DescriptorEvent } from \"@ledgerhq/hw-transport\";\nimport { Subject, from, concat } from \"rxjs\";\nimport { mergeMap } from \"rxjs/operators\";\n\ntype DeviceObj = {\n  vendorId: number,\n  productId: number,\n};\n\nconst disconnectedErrors = [\n  \"I/O error\",\n  \"Attempt to invoke virtual method 'int android.hardware.usb.UsbDevice.getDeviceClass()' on a null object reference\",\n];\n\nconst listLedgerDevices = async () => {\n  const devices = await NativeModules.HID.getDeviceList();\n  return devices.filter((d) => d.vendorId === ledgerUSBVendorId);\n};\n\nconst liveDeviceEventsSubject: Subject<DescriptorEvent<*>> = new Subject();\n\nDeviceEventEmitter.addListener(\"onDeviceConnect\", (device: *) => {\n  if (device.vendorId !== ledgerUSBVendorId) return;\n  const deviceModel = identifyUSBProductId(device.productId);\n  liveDeviceEventsSubject.next({\n    type: \"add\",\n    descriptor: device,\n    deviceModel,\n  });\n});\n\nDeviceEventEmitter.addListener(\"onDeviceDisconnect\", (device: *) => {\n  if (device.vendorId !== ledgerUSBVendorId) return;\n  const deviceModel = identifyUSBProductId(device.productId);\n  liveDeviceEventsSubject.next({\n    type: \"remove\",\n    descriptor: device,\n    deviceModel,\n  });\n});\n\nconst liveDeviceEvents = liveDeviceEventsSubject;\n\n/**\n * Ledger's React Native HID Transport implementation\n * @example\n * import TransportHID from \"@ledgerhq/react-native-hid\";\n * ...\n * TransportHID.create().then(transport => ...)\n */\nexport default class HIDTransport extends Transport<DeviceObj> {\n  id: number;\n  deviceModel: ?DeviceModel;\n\n  constructor(nativeId: number, productId: number) {\n    super();\n    this.id = nativeId;\n    this.deviceModel = identifyUSBProductId(productId);\n  }\n\n  /**\n   * Check if the transport is supported (basically true on Android)\n   */\n  static isSupported = (): Promise<boolean> =>\n    Promise.resolve(!!NativeModules.HID);\n\n  /**\n   * List currently connected devices.\n   * @returns Promise of devices\n   */\n  static async list() {\n    if (!NativeModules.HID) return Promise.resolve([]);\n    let list = await listLedgerDevices();\n    return list;\n  }\n\n  /**\n   * Listen to ledger devices events\n   */\n  static listen(observer: any): any {\n    if (!NativeModules.HID) return { unsubscribe: () => {} };\n    return concat(\n      from(listLedgerDevices()).pipe(\n        mergeMap((devices) =>\n          from(\n            devices.map((device) => ({\n              type: \"add\",\n              descriptor: device,\n              deviceModel: identifyUSBProductId(device.productId),\n            }))\n          )\n        )\n      ),\n      liveDeviceEvents\n    ).subscribe(observer);\n  }\n\n  /**\n   * Open a the transport with a Ledger device\n   */\n  static async open(deviceObj: DeviceObj) {\n    try {\n      const nativeObj = await NativeModules.HID.openDevice(deviceObj);\n      return new HIDTransport(nativeObj.id, deviceObj.productId);\n    } catch (error) {\n      if (disconnectedErrors.includes(error.message)) {\n        throw new DisconnectedDevice(error.message);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * @param {*} apdu input value\n   * @returns Promise of apdu response\n   */\n  async exchange(apdu: Buffer) {\n    return this.exchangeAtomicImpl(async () => {\n      try {\n        const apduHex = apdu.toString(\"hex\");\n        log(\"apdu\", \"=> \" + apduHex);\n        const resultHex = await NativeModules.HID.exchange(this.id, apduHex);\n        const res = Buffer.from(resultHex, \"hex\");\n        log(\"apdu\", \"<= \" + resultHex);\n        return res;\n      } catch (error) {\n        if (disconnectedErrors.includes(error.message)) {\n          this.emit(\"disconnect\", error);\n          throw new DisconnectedDeviceDuringOperation(error.message);\n        }\n        throw error;\n      }\n    });\n  }\n\n  /**\n   * Close the transport\n   * @returns Promise\n   */\n  async close() {\n    await this.exchangeBusyPromise;\n    return NativeModules.HID.closeDevice(this.id);\n  }\n\n  setScrambleKey() {}\n}\n"],"file":"index.js"}