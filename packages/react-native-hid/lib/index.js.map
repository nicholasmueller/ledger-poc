{"version":3,"sources":["../src/index.js"],"names":["disconnectedErrors","listLedgerDevices","devices","NativeModules","HID","getDeviceList","filter","d","vendorId","ledgerUSBVendorId","liveDeviceEventsSubject","Subject","DeviceEventEmitter","addListener","device","deviceModel","productId","next","type","descriptor","liveDeviceEvents","HIDTransport","Transport","constructor","nativeId","id","list","Promise","resolve","listen","observer","unsubscribe","pipe","map","subscribe","open","deviceObj","nativeObj","openDevice","error","includes","message","DisconnectedDevice","exchange","apdu","exchangeAtomicImpl","apduHex","toString","resultHex","res","Buffer","from","emit","DisconnectedDeviceDuringOperation","close","exchangeBusyPromise","closeDevice","setScrambleKey","isSupported"],"mappings":"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","sourcesContent":["//@flow\nimport { NativeModules, DeviceEventEmitter } from \"react-native\";\nimport { ledgerUSBVendorId, identifyUSBProductId } from \"@ledgerhq/devices\";\nimport type { DeviceModel } from \"@ledgerhq/devices\";\nimport {\n  DisconnectedDeviceDuringOperation,\n  DisconnectedDevice,\n} from \"@ledgerhq/errors\";\nimport { log } from \"@ledgerhq/logs\";\nimport Transport from \"@ledgerhq/hw-transport\";\nimport type { DescriptorEvent } from \"@ledgerhq/hw-transport\";\nimport { Subject, from, concat } from \"rxjs\";\nimport { mergeMap } from \"rxjs/operators\";\n\ntype DeviceObj = {\n  vendorId: number,\n  productId: number,\n};\n\nconst disconnectedErrors = [\n  \"I/O error\",\n  \"Attempt to invoke virtual method 'int android.hardware.usb.UsbDevice.getDeviceClass()' on a null object reference\",\n];\n\nconst listLedgerDevices = async () => {\n  const devices = await NativeModules.HID.getDeviceList();\n  return devices.filter((d) => d.vendorId === ledgerUSBVendorId);\n};\n\nconst liveDeviceEventsSubject: Subject<DescriptorEvent<*>> = new Subject();\n\nDeviceEventEmitter.addListener(\"onDeviceConnect\", (device: *) => {\n  if (device.vendorId !== ledgerUSBVendorId) return;\n  const deviceModel = identifyUSBProductId(device.productId);\n  liveDeviceEventsSubject.next({\n    type: \"add\",\n    descriptor: device,\n    deviceModel,\n  });\n});\n\nDeviceEventEmitter.addListener(\"onDeviceDisconnect\", (device: *) => {\n  if (device.vendorId !== ledgerUSBVendorId) return;\n  const deviceModel = identifyUSBProductId(device.productId);\n  liveDeviceEventsSubject.next({\n    type: \"remove\",\n    descriptor: device,\n    deviceModel,\n  });\n});\n\nconst liveDeviceEvents = liveDeviceEventsSubject;\n\n/**\n * Ledger's React Native HID Transport implementation\n * @example\n * import TransportHID from \"@ledgerhq/react-native-hid\";\n * ...\n * TransportHID.create().then(transport => ...)\n */\nexport default class HIDTransport extends Transport<DeviceObj> {\n  id: number;\n  deviceModel: ?DeviceModel;\n\n  constructor(nativeId: number, productId: number) {\n    super();\n    this.id = nativeId;\n    this.deviceModel = identifyUSBProductId(productId);\n  }\n\n  /**\n   * Check if the transport is supported (basically true on Android)\n   */\n  static isSupported = (): Promise<boolean> =>\n    Promise.resolve(!!NativeModules.HID);\n\n  /**\n   * List currently connected devices.\n   * @returns Promise of devices\n   */\n  static async list() {\n    if (!NativeModules.HID) return Promise.resolve([]);\n    let list = await listLedgerDevices();\n    return list;\n  }\n\n  /**\n   * Listen to ledger devices events\n   */\n  static listen(observer: any): any {\n    if (!NativeModules.HID) return { unsubscribe: () => {} };\n    return concat(\n      from(listLedgerDevices()).pipe(\n        mergeMap((devices) =>\n          from(\n            devices.map((device) => ({\n              type: \"add\",\n              descriptor: device,\n              deviceModel: identifyUSBProductId(device.productId),\n            }))\n          )\n        )\n      ),\n      liveDeviceEvents\n    ).subscribe(observer);\n  }\n\n  /**\n   * Open a the transport with a Ledger device\n   */\n  static async open(deviceObj: DeviceObj) {\n    try {\n      const nativeObj = await NativeModules.HID.openDevice(deviceObj);\n      return new HIDTransport(nativeObj.id, deviceObj.productId);\n    } catch (error) {\n      if (disconnectedErrors.includes(error.message)) {\n        throw new DisconnectedDevice(error.message);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * @param {*} apdu input value\n   * @returns Promise of apdu response\n   */\n  async exchange(apdu: Buffer) {\n    return this.exchangeAtomicImpl(async () => {\n      try {\n        const apduHex = apdu.toString(\"hex\");\n        log(\"apdu\", \"=> \" + apduHex);\n        const resultHex = await NativeModules.HID.exchange(this.id, apduHex);\n        const res = Buffer.from(resultHex, \"hex\");\n        log(\"apdu\", \"<= \" + resultHex);\n        return res;\n      } catch (error) {\n        if (disconnectedErrors.includes(error.message)) {\n          this.emit(\"disconnect\", error);\n          throw new DisconnectedDeviceDuringOperation(error.message);\n        }\n        throw error;\n      }\n    });\n  }\n\n  /**\n   * Close the transport\n   * @returns Promise\n   */\n  async close() {\n    await this.exchangeBusyPromise;\n    return NativeModules.HID.closeDevice(this.id);\n  }\n\n  setScrambleKey() {}\n}\n"],"file":"index.js"}