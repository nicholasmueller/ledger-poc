{"version":3,"sources":["../src/BleTransport.js"],"names":["Transport","BleManager","ConnectionPriority","BleErrorCode","getBluetoothServiceUuids","getInfosForServiceUuid","sendAPDU","receiveAPDU","log","Observable","defer","merge","from","share","ignoreElements","first","map","tap","CantOpenDevice","TransportError","DisconnectedDeviceDuringOperation","monitorCharacteristic","awaitsBleOn","decoratePromiseErrors","remapError","connectOptions","requestMTU","transportsCache","bleManager","retrieveInfos","device","serviceUUIDs","serviceUUID","infos","reconnectionConfig","pairingThreshold","delayAfterFirstPairing","setReconnectionConfig","config","delay","ms","Promise","success","setTimeout","open","deviceOrId","needsReconnect","devices","length","connectedDevices","connectedDevicesFiltered","filter","d","id","connectToDevice","e","errorCode","DeviceMTUChangeFailed","isConnected","connect","discoverAllServicesAndCharacteristics","res","characteristics","uuid","characteristicsForService","deviceModel","serviceUuid","writeUuid","notifyUuid","writeC","notifyC","c","isWritableWithResponse","isNotifiable","mtu","notifyObservable","pipe","value","toString","notif","subscribe","transport","BluetoothTransport","onDisconnect","notYetDisconnected","unsubscribe","disconnectedSub","remove","emit","onDisconnected","beforeMTUTime","Date","now","inferMTU","afterMTUTime","disconnect","catch","observeState","observer","emitFromState","type","next","available","onStateChange","listen","unsubscribed","stateSub","state","all","startDeviceScan","bleError","error","descriptor","stopDeviceScan","constructor","writeCharacteristic","mtuSize","exchange","apdu","exchangeAtomicImpl","msgIn","data","write","toPromise","msgOut","String","cancelDeviceConnection","buffer","txid","writeWithResponse","message","readUInt8","Buffer","requestConnectionPriority","connectionPriority","setScrambleKey","close","exchangeBusyPromise","isSupported","resolve","setLogLevel","level","list","Error"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-disable prefer-template */\n\nimport Transport from \"@ledgerhq/hw-transport\";\nimport {\n  BleManager,\n  ConnectionPriority,\n  BleErrorCode,\n} from \"react-native-ble-plx\";\nimport {\n  getBluetoothServiceUuids,\n  getInfosForServiceUuid,\n} from \"@ledgerhq/devices\";\nimport type { DeviceModel } from \"@ledgerhq/devices\";\n\nimport { sendAPDU } from \"@ledgerhq/devices/lib/ble/sendAPDU\";\nimport { receiveAPDU } from \"@ledgerhq/devices/lib/ble/receiveAPDU\";\nimport { log } from \"@ledgerhq/logs\";\nimport { Observable, defer, merge, from } from \"rxjs\";\nimport { share, ignoreElements, first, map, tap } from \"rxjs/operators\";\nimport {\n  CantOpenDevice,\n  TransportError,\n  DisconnectedDeviceDuringOperation,\n} from \"@ledgerhq/errors\";\nimport type { Device, Characteristic } from \"./types\";\nimport { monitorCharacteristic } from \"./monitorCharacteristic\";\nimport { awaitsBleOn } from \"./awaitsBleOn\";\nimport { decoratePromiseErrors, remapError } from \"./remapErrors\";\n\nlet connectOptions = {\n  requestMTU: 156,\n};\n\nconst transportsCache = {};\nconst bleManager = new BleManager();\n\nconst retrieveInfos = (device) => {\n  if (!device || !device.serviceUUIDs) return;\n  const [serviceUUID] = device.serviceUUIDs;\n  if (!serviceUUID) return;\n  const infos = getInfosForServiceUuid(serviceUUID);\n  if (!infos) return;\n  return infos;\n};\n\ntype ReconnectionConfig = {\n  pairingThreshold: number,\n  delayAfterFirstPairing: number,\n};\nlet reconnectionConfig: ?ReconnectionConfig = {\n  pairingThreshold: 1000,\n  delayAfterFirstPairing: 4000,\n};\nexport function setReconnectionConfig(config: ?ReconnectionConfig) {\n  reconnectionConfig = config;\n}\n\nconst delay = (ms) => new Promise((success) => setTimeout(success, ms));\n\nasync function open(deviceOrId: Device | string, needsReconnect: boolean) {\n  let device;\n  if (typeof deviceOrId === \"string\") {\n    if (transportsCache[deviceOrId]) {\n      log(\"ble-verbose\", \"Transport in cache, using that.\");\n      return transportsCache[deviceOrId];\n    }\n\n    log(\"ble-verbose\", `open(${deviceOrId})`);\n\n    await awaitsBleOn(bleManager);\n\n    if (!device) {\n      // works for iOS but not Android\n      const devices = await bleManager.devices([deviceOrId]);\n      log(\"ble-verbose\", `found ${devices.length} devices`);\n      [device] = devices;\n    }\n\n    if (!device) {\n      const connectedDevices = await bleManager.connectedDevices(\n        getBluetoothServiceUuids()\n      );\n      const connectedDevicesFiltered = connectedDevices.filter(\n        (d) => d.id === deviceOrId\n      );\n      log(\n        \"ble-verbose\",\n        `found ${connectedDevicesFiltered.length} connected devices`\n      );\n      [device] = connectedDevicesFiltered;\n    }\n\n    if (!device) {\n      log(\"ble-verbose\", `connectToDevice(${deviceOrId})`);\n      try {\n        device = await bleManager.connectToDevice(deviceOrId, connectOptions);\n      } catch (e) {\n        if (e.errorCode === BleErrorCode.DeviceMTUChangeFailed) {\n          // eslint-disable-next-line require-atomic-updates\n          connectOptions = {};\n          device = await bleManager.connectToDevice(deviceOrId);\n        } else {\n          throw e;\n        }\n      }\n    }\n\n    if (!device) {\n      throw new CantOpenDevice();\n    }\n  } else {\n    device = deviceOrId;\n  }\n\n  if (!(await device.isConnected())) {\n    log(\"ble-verbose\", \"not connected. connecting...\");\n    try {\n      await device.connect(connectOptions);\n    } catch (e) {\n      if (e.errorCode === BleErrorCode.DeviceMTUChangeFailed) {\n        // eslint-disable-next-line require-atomic-updates\n        connectOptions = {};\n        await device.connect();\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  await device.discoverAllServicesAndCharacteristics();\n\n  let res = retrieveInfos(device);\n  let characteristics;\n  if (!res) {\n    for (const uuid of getBluetoothServiceUuids()) {\n      try {\n        characteristics = await device.characteristicsForService(uuid);\n        res = getInfosForServiceUuid(uuid);\n        break;\n      } catch (e) {\n        // we attempt to connect to service\n      }\n    }\n  }\n  if (!res) {\n    throw new TransportError(\"service not found\", \"BLEServiceNotFound\");\n  }\n\n  const { deviceModel, serviceUuid, writeUuid, notifyUuid } = res;\n\n  if (!characteristics) {\n    characteristics = await device.characteristicsForService(serviceUuid);\n  }\n\n  if (!characteristics) {\n    throw new TransportError(\"service not found\", \"BLEServiceNotFound\");\n  }\n  let writeC;\n  let notifyC;\n  for (const c of characteristics) {\n    if (c.uuid === writeUuid) {\n      writeC = c;\n    } else if (c.uuid === notifyUuid) {\n      notifyC = c;\n    }\n  }\n  if (!writeC) {\n    throw new TransportError(\n      \"write characteristic not found\",\n      \"BLEChracteristicNotFound\"\n    );\n  }\n  if (!notifyC) {\n    throw new TransportError(\n      \"notify characteristic not found\",\n      \"BLEChracteristicNotFound\"\n    );\n  }\n  if (!writeC.isWritableWithResponse) {\n    throw new TransportError(\n      \"write characteristic not writableWithResponse\",\n      \"BLEChracteristicInvalid\"\n    );\n  }\n  if (!notifyC.isNotifiable) {\n    throw new TransportError(\n      \"notify characteristic not notifiable\",\n      \"BLEChracteristicInvalid\"\n    );\n  }\n\n  log(\"ble-verbose\", `device.mtu=${device.mtu}`);\n\n  const notifyObservable = monitorCharacteristic(notifyC).pipe(\n    tap((value) => {\n      log(\"ble-frame\", \"<= \" + value.toString(\"hex\"));\n    }),\n    share()\n  );\n\n  const notif = notifyObservable.subscribe();\n\n  const transport = new BluetoothTransport(\n    device,\n    writeC,\n    notifyObservable,\n    deviceModel\n  );\n\n  const onDisconnect = (e) => {\n    transport.notYetDisconnected = false;\n    notif.unsubscribe();\n    disconnectedSub.remove();\n    delete transportsCache[transport.id];\n    log(\"ble-verbose\", `BleTransport(${transport.id}) disconnected`);\n    transport.emit(\"disconnect\", e);\n  };\n\n  // eslint-disable-next-line require-atomic-updates\n  transportsCache[transport.id] = transport;\n  const disconnectedSub = device.onDisconnected((e) => {\n    if (!transport.notYetDisconnected) return;\n    onDisconnect(e);\n  });\n\n  let beforeMTUTime = Date.now();\n  try {\n    await transport.inferMTU();\n  } finally {\n    let afterMTUTime = Date.now();\n\n    if (reconnectionConfig) {\n      // workaround for #279: we need to open() again if we come the first time here,\n      // to make sure we do a disconnect() after the first pairing time\n      // because of a firmware bug\n\n      if (afterMTUTime - beforeMTUTime < reconnectionConfig.pairingThreshold) {\n        needsReconnect = false; // (optim) there is likely no new pairing done because mtu answer was fast.\n      }\n\n      if (needsReconnect) {\n        // necessary time for the bonding workaround\n        await BluetoothTransport.disconnect(transport.id).catch(() => {});\n        await delay(reconnectionConfig.delayAfterFirstPairing);\n      }\n    } else {\n      needsReconnect = false;\n    }\n  }\n\n  if (needsReconnect) {\n    return open(device, false);\n  }\n\n  return transport;\n}\n\n/**\n * react-native bluetooth BLE implementation\n * @example\n * import BluetoothTransport from \"@ledgerhq/react-native-hw-transport-ble\";\n */\nexport default class BluetoothTransport extends Transport<Device | string> {\n  /**\n   *\n   */\n  static isSupported = (): Promise<boolean> =>\n    Promise.resolve(typeof BleManager === \"function\");\n\n  /**\n   *\n   */\n  static setLogLevel = (level: *) => {\n    bleManager.setLogLevel(level);\n  };\n\n  /**\n   * TODO could add this concept in all transports\n   * observe event with { available: bool, string } // available is generic, type is specific\n   * an event is emit once and then listened\n   */\n  static observeState(observer: *) {\n    const emitFromState = (type) => {\n      observer.next({ type, available: type === \"PoweredOn\" });\n    };\n    bleManager.onStateChange(emitFromState, true);\n    return {\n      unsubscribe: () => {},\n    };\n  }\n\n  static list = (): * => {\n    throw new Error(\"not implemented\");\n  };\n\n  /**\n   * Scan for bluetooth Ledger devices\n   */\n  static listen(observer: *) {\n    log(\"ble-verbose\", \"listen...\");\n    let unsubscribed;\n\n    // $FlowFixMe\n    const stateSub = bleManager.onStateChange(async (state) => {\n      if (state === \"PoweredOn\") {\n        stateSub.remove();\n\n        const devices = await bleManager.connectedDevices(\n          getBluetoothServiceUuids()\n        );\n        if (unsubscribed) return;\n\n        await Promise.all(\n          devices.map((d) =>\n            BluetoothTransport.disconnect(d.id).catch(() => {})\n          )\n        );\n        if (unsubscribed) return;\n\n        bleManager.startDeviceScan(\n          getBluetoothServiceUuids(),\n          null,\n          (bleError, device) => {\n            if (bleError) {\n              observer.error(bleError);\n              unsubscribe();\n              return;\n            }\n            const res = retrieveInfos(device);\n            const deviceModel = res && res.deviceModel;\n            observer.next({ type: \"add\", descriptor: device, deviceModel });\n          }\n        );\n      }\n    }, true);\n    const unsubscribe = () => {\n      unsubscribed = true;\n      bleManager.stopDeviceScan();\n      stateSub.remove();\n      log(\"ble-verbose\", \"done listening.\");\n    };\n    return { unsubscribe };\n  }\n\n  /**\n   * Open a BLE transport\n   * @param {*} deviceOrId\n   */\n  static async open(deviceOrId: Device | string) {\n    return open(deviceOrId, true);\n  }\n\n  /**\n   * Globally disconnect a BLE device by its ID\n   */\n  static disconnect = async (id: *) => {\n    log(\"ble-verbose\", `user disconnect(${id})`);\n    await bleManager.cancelDeviceConnection(id);\n  };\n\n  id: string;\n\n  device: Device;\n\n  mtuSize: number = 20;\n\n  writeCharacteristic: Characteristic;\n\n  notifyObservable: Observable<Buffer>;\n\n  deviceModel: DeviceModel;\n\n  notYetDisconnected = true;\n\n  constructor(\n    device: Device,\n    writeCharacteristic: Characteristic,\n    notifyObservable: Observable<Buffer>,\n    deviceModel: DeviceModel\n  ) {\n    super();\n    this.id = device.id;\n    this.device = device;\n    this.writeCharacteristic = writeCharacteristic;\n    this.notifyObservable = notifyObservable;\n    this.deviceModel = deviceModel;\n    log(\"ble-verbose\", `BleTransport(${String(this.id)}) new instance`);\n  }\n\n  /**\n   * communicate with a BLE transport\n   */\n  exchange = (apdu: Buffer): Promise<Buffer> =>\n    this.exchangeAtomicImpl(async () => {\n      try {\n        const msgIn = apdu.toString(\"hex\");\n        log(\"apdu\", `=> ${msgIn}`);\n\n        const data = await merge(\n          // $FlowFixMe\n          this.notifyObservable.pipe(receiveAPDU),\n          sendAPDU(this.write, apdu, this.mtuSize)\n        ).toPromise();\n\n        const msgOut = data.toString(\"hex\");\n        log(\"apdu\", `<= ${msgOut}`);\n\n        return data;\n      } catch (e) {\n        log(\"ble-error\", \"exchange got \" + String(e));\n        if (this.notYetDisconnected) {\n          // in such case we will always disconnect because something is bad.\n          await bleManager.cancelDeviceConnection(this.id).catch(() => {}); // but we ignore if disconnect worked.\n        }\n        throw remapError(e);\n      }\n    });\n\n  // TODO we probably will do this at end of open\n  async inferMTU() {\n    let { mtu } = this.device;\n    await this.exchangeAtomicImpl(async () => {\n      try {\n        mtu =\n          (await merge(\n            this.notifyObservable.pipe(\n              first((buffer) => buffer.readUInt8(0) === 0x08),\n              map((buffer) => buffer.readUInt8(5))\n            ),\n            defer(() => from(this.write(Buffer.from([0x08, 0, 0, 0, 0])))).pipe(\n              ignoreElements()\n            )\n          ).toPromise()) + 3;\n      } catch (e) {\n        log(\"ble-error\", \"inferMTU got \" + String(e));\n        await bleManager.cancelDeviceConnection(this.id).catch(() => {}); // but we ignore if disconnect worked.\n        throw remapError(e);\n      }\n    });\n\n    if (mtu > 23) {\n      const mtuSize = mtu - 3;\n      log(\n        \"ble-verbose\",\n        `BleTransport(${String(this.id)}) mtu set to ${String(mtuSize)}`\n      );\n      this.mtuSize = mtuSize;\n    }\n\n    return this.mtuSize;\n  }\n\n  async requestConnectionPriority(\n    connectionPriority: \"Balanced\" | \"High\" | \"LowPower\"\n  ) {\n    await decoratePromiseErrors(\n      this.device.requestConnectionPriority(\n        ConnectionPriority[connectionPriority]\n      )\n    );\n  }\n\n  setScrambleKey() {}\n\n  write = async (buffer: Buffer, txid?: ?string) => {\n    log(\"ble-frame\", \"=> \" + buffer.toString(\"hex\"));\n    try {\n      await this.writeCharacteristic.writeWithResponse(\n        buffer.toString(\"base64\"),\n        txid\n      );\n    } catch (e) {\n      throw new DisconnectedDeviceDuringOperation(e.message);\n    }\n  };\n\n  async close() {\n    if (this.exchangeBusyPromise) {\n      await this.exchangeBusyPromise;\n    }\n  }\n}\n"],"file":"BleTransport.js"}