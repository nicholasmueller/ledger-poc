{"version":3,"sources":["../src/SpeculosTransport.js"],"names":["Subject","net","Transport","DisconnectedDevice","DisconnectedDeviceDuringOperation","TransportError","log","SpeculosTransport","constructor","apduSocket","opts","rejectExchange","_e","resolveExchange","_b","automationSocket","automationEvents","button","command","Promise","resolve","reject","buttonPort","host","Error","socket","Socket","on","e","destroy","connect","write","Buffer","from","emit","message","data","decodeAPDUPayload","automationPort","String","split","toString","filter","ascii","forEach","json","JSON","parse","next","exchange","apdu","hex","encoded","encodeAPDU","res","setScrambleKey","close","isSupported","list","listen","_observer","unsubscribe","open","apduPort","setTimeout","size","allocUnsafe","writeUIntBE","length","concat","dataLength","readUIntBE","payload","slice"],"mappings":"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","sourcesContent":["//@flow\nimport { Subject } from \"rxjs\";\nimport net from \"net\";\nimport Transport from \"@ledgerhq/hw-transport\";\nimport {\n  DisconnectedDevice,\n  DisconnectedDeviceDuringOperation,\n  TransportError,\n} from \"@ledgerhq/errors\";\nimport { log } from \"@ledgerhq/logs\";\n\n/**\n *\n */\nexport type SpeculosTransportOpts = {\n  apduPort: number,\n  buttonPort?: number,\n  automationPort?: number,\n  host?: string,\n};\n\n/**\n * Speculos TCP transport implementation\n *\n * @example\n * import SpeculosTransport from \"@ledgerhq/hw-transport-node-speculos\";\n * const transport = await SpeculosTransport.open({ apduPort });\n * const res = await transport.send(0xE0, 0x01, 0, 0);\n */\nexport default class SpeculosTransport extends Transport<SpeculosTransportOpts> {\n  static isSupported = (): Promise<boolean> => Promise.resolve(true);\n\n  // this transport is not discoverable\n  static list = (): * => Promise.resolve([]);\n  static listen = (_observer: *) => ({\n    unsubscribe: () => {},\n  });\n\n  /**\n   *\n   */\n  static open = (opts: SpeculosTransportOpts): Promise<SpeculosTransport> =>\n    new Promise((resolve, reject) => {\n      const socket = new net.Socket();\n      socket.on(\"error\", (e) => {\n        socket.destroy();\n        reject(e);\n      });\n      socket.on(\"end\", () => {\n        reject(new DisconnectedDevice(\"tcp closed\"));\n      });\n      socket.connect(opts.apduPort, opts.host || \"127.0.0.1\", () => {\n        // we delay a bit the transport creation to make sure the tcp does not hang up\n        setTimeout(() => {\n          resolve(new SpeculosTransport(socket, opts));\n        }, 100);\n      });\n    });\n\n  apduSocket: net.Socket;\n  opts: SpeculosTransportOpts;\n  rejectExchange: (Error) => void = (_e) => {};\n  resolveExchange: (Buffer) => void = (_b) => {};\n\n  automationSocket: ?net.Socket;\n  automationEvents: Subject<Object> = new Subject();\n\n  constructor(apduSocket: net.Socket, opts: SpeculosTransportOpts) {\n    super();\n    this.opts = opts;\n    this.apduSocket = apduSocket;\n    apduSocket.on(\"error\", (e) => {\n      this.emit(\"disconnect\", new DisconnectedDevice(e.message));\n      this.rejectExchange(e);\n      this.apduSocket.destroy();\n    });\n    apduSocket.on(\"end\", () => {\n      this.emit(\"disconnect\", new DisconnectedDevice());\n      this.rejectExchange(new DisconnectedDeviceDuringOperation());\n    });\n    apduSocket.on(\"data\", (data) => {\n      try {\n        this.resolveExchange(decodeAPDUPayload(data));\n      } catch (e) {\n        this.rejectExchange(e);\n      }\n    });\n\n    const { automationPort } = opts;\n    if (automationPort) {\n      const socket = new net.Socket();\n      this.automationSocket = socket;\n      socket.on(\"error\", (e) => {\n        log(\"speculos-automation-error\", String(e));\n        socket.destroy();\n      });\n      socket.on(\"data\", (data) => {\n        log(\"speculos-automation-data\", data);\n        const split = data.toString(\"ascii\").split(\"\\n\");\n        split\n          .filter((ascii) => !!ascii)\n          .forEach((ascii) => {\n            const json = JSON.parse(ascii);\n            this.automationEvents.next(json);\n          });\n      });\n      socket.connect(automationPort, opts.host || \"127.0.0.1\");\n    }\n  }\n\n  /**\n   * Send a speculos button command\n   * typically \"Ll\" would press and release the left button\n   * typically \"Rr\" would press and release the right button\n   * @param {*} command\n   */\n  button = (command: string): Promise<void> =>\n    new Promise((resolve, reject) => {\n      log(\"speculos-button\", command);\n      const { buttonPort, host } = this.opts;\n      if (!buttonPort) throw new Error(\"buttonPort is missing\");\n      const socket = new net.Socket();\n      socket.on(\"error\", (e) => {\n        socket.destroy();\n        reject(e);\n      });\n      socket.connect(buttonPort, host || \"127.0.0.1\", () => {\n        socket.write(Buffer.from(command, \"ascii\"));\n        socket.destroy();\n        resolve();\n      });\n    });\n\n  async exchange(apdu: Buffer): Promise<Buffer> {\n    const hex = apdu.toString(\"hex\");\n    log(\"apdu\", \"=> \" + hex);\n    const encoded = encodeAPDU(apdu);\n    const res = await new Promise((resolve, reject) => {\n      this.rejectExchange = reject;\n      this.resolveExchange = resolve;\n      this.apduSocket.write(encoded);\n    });\n    log(\"apdu\", \"<= \" + res.toString(\"hex\"));\n    return res;\n  }\n\n  setScrambleKey() {}\n\n  async close() {\n    if (this.automationSocket) this.automationSocket.destroy();\n    this.apduSocket.destroy();\n    return Promise.resolve();\n  }\n}\n\nfunction encodeAPDU(apdu: Buffer) {\n  const size = Buffer.allocUnsafe(4);\n  size.writeUIntBE(apdu.length, 0, 4);\n  return Buffer.concat([size, apdu]);\n}\n\nfunction decodeAPDUPayload(data: Buffer) {\n  const dataLength = data.readUIntBE(0, 4); // 4 bytes tells the data length\n  const size = dataLength + 2; // size does not include the status code so we add 2\n  const payload = data.slice(4);\n  if (payload.length !== size) {\n    throw new TransportError(\n      `Expected payload of length ${size} but got ${payload.length}`\n    );\n  }\n  return payload;\n}\n"],"file":"SpeculosTransport.js"}