{"version":3,"sources":["../src/createTransportRecorder.js"],"names":["Transport","createTransportRecorder","DecoratedTransport","recordStore","TransportRecorder","setScrambleKey","close","transport","constructor","t","exchange","apdu","output","then","out","recordExchange","isSupported","list","listen","open","args"],"mappings":"AACA,OAAOA,SAAP,MAAsB,wBAAtB;;AAGA;;;;;AAKA,MAAMC,uBAAuB,GAAG,CAC9BC,kBAD8B,EAE9BC,WAF8B,KAGN;AACxB,QAAMC,iBAAN,SAAgCJ,SAAhC,CAA6C;AAO3CK,IAAAA,cAAc,GAAG,CAAE;;AACnBC,IAAAA,KAAK,GAAG;AACN,aAAO,KAAKC,SAAL,CAAeD,KAAf,EAAP;AACD;;AAEDE,IAAAA,WAAW,CAACC,CAAD,EAAI;AACb;AADa,WADfF,SACe;AAEb,WAAKA,SAAL,GAAiBE,CAAjB;AACD;;AACDC,IAAAA,QAAQ,CAACC,IAAD,EAAgC;AACtC,YAAMC,MAAM,GAAG,KAAKL,SAAL,CAAeG,QAAf,CAAwBC,IAAxB,CAAf;AACAC,MAAAA,MAAM,CAACC,IAAP,CAAaC,GAAD,IAAS;AACnBX,QAAAA,WAAW,CAACY,cAAZ,CAA2BJ,IAA3B,EAAiCG,GAAjC;AACD,OAFD;AAGA,aAAOF,MAAP;AACD;;AAtB0C;;AAAvCR,EAAAA,iBADkB,CAEfD,WAFe,GAEDA,WAFC;AAClBC,EAAAA,iBADkB,CAGfY,WAHe,GAGDd,kBAAkB,CAACc,WAHlB;AAClBZ,EAAAA,iBADkB,CAIfa,IAJe,GAIRf,kBAAkB,CAACe,IAJX;AAClBb,EAAAA,iBADkB,CAKfc,MALe,GAKNhB,kBAAkB,CAACgB,MALb;;AAClBd,EAAAA,iBADkB,CAMfe,IANe,GAMR,CAAC,GAAGC,IAAJ,KACZlB,kBAAkB,CAACiB,IAAnB,CAAwB,GAAGC,IAA3B,EAAiCP,IAAjC,CAAuCJ,CAAD,IAAO,IAAIL,iBAAJ,CAAsBK,CAAtB,CAA7C,CAPoB;;AAyBxB,SAAOL,iBAAP;AACD,CA7BD;;AA+BA,eAAeH,uBAAf","sourcesContent":["//@flow\nimport Transport from \"@ledgerhq/hw-transport\";\nimport type { RecordStore } from \"./RecordStore\";\n\n/**\n * decorate a real transport and proxy it to record the APDUs.\n * @param {Class<Transport<*>>} DecoratedTransport: an actual transport class. Like @ledgerhq/hw-transport-webusb\n * @param {RecordStore} recordStore: a record store to record the apdu in.\n */\nconst createTransportRecorder = (\n  DecoratedTransport: Class<Transport<*>>,\n  recordStore: RecordStore\n): Class<Transport<*>> => {\n  class TransportRecorder extends Transport<*> {\n    static recordStore = recordStore;\n    static isSupported = DecoratedTransport.isSupported;\n    static list = DecoratedTransport.list;\n    static listen = DecoratedTransport.listen;\n    static open = (...args) =>\n      DecoratedTransport.open(...args).then((t) => new TransportRecorder(t));\n    setScrambleKey() {}\n    close() {\n      return this.transport.close();\n    }\n    transport: Transport<*>;\n    constructor(t) {\n      super();\n      this.transport = t;\n    }\n    exchange(apdu: Buffer): Promise<Buffer> {\n      const output = this.transport.exchange(apdu);\n      output.then((out) => {\n        recordStore.recordExchange(apdu, out);\n      });\n      return output;\n    }\n  }\n  return TransportRecorder;\n};\n\nexport default createTransportRecorder;\n"],"file":"createTransportRecorder.js"}