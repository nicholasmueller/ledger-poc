{"version":3,"sources":["../src/createTransportReplayer.js"],"names":["Transport","log","createTransportReplayer","recordStore","TransportReplayer","setScrambleKey","close","Promise","resolve","exchange","apdu","toString","buffer","replayExchange","e","String","reject","isSupported","list","listen","o","unsubscribed","setTimeout","next","type","descriptor","complete","unsubscribe","open"],"mappings":"AACA,OAAOA,SAAP,MAAsB,wBAAtB;AACA,SAASC,GAAT,QAAoB,gBAApB;;AAGA;;;;AAIA,MAAMC,uBAAuB,GAC3BC,WAD8B,IAEN;AACxB,QAAMC,iBAAN,SAAgCJ,SAAhC,CAA6C;AAkB3CK,IAAAA,cAAc,GAAG,CAAE;;AAEnBC,IAAAA,KAAK,GAAG;AACN,aAAOC,OAAO,CAACC,OAAR,EAAP;AACD;;AAEDC,IAAAA,QAAQ,CAACC,IAAD,EAAgC;AACtCT,MAAAA,GAAG,CAAC,MAAD,EAASS,IAAI,CAACC,QAAL,CAAc,KAAd,CAAT,CAAH;;AACA,UAAI;AACF,cAAMC,MAAM,GAAGT,WAAW,CAACU,cAAZ,CAA2BH,IAA3B,CAAf;AACAT,QAAAA,GAAG,CAAC,MAAD,EAASW,MAAM,CAACD,QAAP,CAAgB,KAAhB,CAAT,CAAH;AACA,eAAOJ,OAAO,CAACC,OAAR,CAAgBI,MAAhB,CAAP;AACD,OAJD,CAIE,OAAOE,CAAP,EAAU;AACVb,QAAAA,GAAG,CAAC,YAAD,EAAec,MAAM,CAACD,CAAD,CAArB,CAAH;AACA,eAAOP,OAAO,CAACS,MAAR,CAAeF,CAAf,CAAP;AACD;AACF;;AAlC0C;;AAAvCV,EAAAA,iBADkB,CAEfa,WAFe,GAED,MAAMV,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAFL;;AAClBJ,EAAAA,iBADkB,CAGfc,IAHe,GAGR,MAAMX,OAAO,CAACC,OAAR,CAAgB,CAAC,IAAD,CAAhB,CAHE;;AAClBJ,EAAAA,iBADkB,CAIfe,MAJe,GAILC,CAAD,IAAO;AACrB,QAAIC,YAAJ;AACAC,IAAAA,UAAU,CAAC,MAAM;AACf,UAAID,YAAJ,EAAkB;AAClBD,MAAAA,CAAC,CAACG,IAAF,CAAO;AAAEC,QAAAA,IAAI,EAAE,KAAR;AAAeC,QAAAA,UAAU,EAAE;AAA3B,OAAP;AACAL,MAAAA,CAAC,CAACM,QAAF;AACD,KAJS,EAIP,CAJO,CAAV;AAKA,WAAO;AACLC,MAAAA,WAAW,EAAE,MAAM;AACjBN,QAAAA,YAAY,GAAG,IAAf;AACD;AAHI,KAAP;AAKD,GAhBqB;;AAClBjB,EAAAA,iBADkB,CAiBfwB,IAjBe,GAiBR,MAAMrB,OAAO,CAACC,OAAR,CAAgB,IAAIJ,iBAAJ,EAAhB,CAjBE;;AAqCxB,SAAOA,iBAAP;AACD,CAxCD;;AA0CA,eAAeF,uBAAf","sourcesContent":["//@flow\nimport Transport from \"@ledgerhq/hw-transport\";\nimport { log } from \"@ledgerhq/logs\";\nimport type { RecordStore } from \"./RecordStore\";\n\n/**\n * create a transport replayer with a record store.\n * @param recordStore\n */\nconst createTransportReplayer = (\n  recordStore: RecordStore\n): Class<Transport<*>> => {\n  class TransportReplayer extends Transport<*> {\n    static isSupported = () => Promise.resolve(true);\n    static list = () => Promise.resolve([null]);\n    static listen = (o) => {\n      let unsubscribed;\n      setTimeout(() => {\n        if (unsubscribed) return;\n        o.next({ type: \"add\", descriptor: null });\n        o.complete();\n      }, 0);\n      return {\n        unsubscribe: () => {\n          unsubscribed = true;\n        },\n      };\n    };\n    static open = () => Promise.resolve(new TransportReplayer());\n\n    setScrambleKey() {}\n\n    close() {\n      return Promise.resolve();\n    }\n\n    exchange(apdu: Buffer): Promise<Buffer> {\n      log(\"apdu\", apdu.toString(\"hex\"));\n      try {\n        const buffer = recordStore.replayExchange(apdu);\n        log(\"apdu\", buffer.toString(\"hex\"));\n        return Promise.resolve(buffer);\n      } catch (e) {\n        log(\"apdu-error\", String(e));\n        return Promise.reject(e);\n      }\n    }\n  }\n  return TransportReplayer;\n};\n\nexport default createTransportReplayer;\n"],"file":"createTransportReplayer.js"}